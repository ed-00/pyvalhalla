// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: info.proto
// Protobuf C++ Version: 5.29.3

#include "info.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {

inline constexpr Statistic::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_{0},
        frequency_{0},
        type_{static_cast< ::valhalla::StatisticType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Statistic::Statistic(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StatisticDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticDefaultTypeInternal() {}
  union {
    Statistic _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticDefaultTypeInternal _Statistic_default_instance_;

inline constexpr CodedDescription::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CodedDescription::CodedDescription(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CodedDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CodedDescriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CodedDescriptionDefaultTypeInternal() {}
  union {
    CodedDescription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CodedDescriptionDefaultTypeInternal _CodedDescription_default_instance_;

inline constexpr Info::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : statistics_{},
        errors_{},
        warnings_{},
        is_service_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Info::Info(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoDefaultTypeInternal() {}
  union {
    Info _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoDefaultTypeInternal _Info_default_instance_;
}  // namespace valhalla
namespace valhalla {
PROTOBUF_CONSTINIT const uint32_t StatisticType_internal_data_[] = {
    262144u, 0u, };
bool StatisticType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    StatisticType_strings[4] = {};

static const char StatisticType_names[] = {
    "count"
    "gauge"
    "set"
    "timing"
};

static const ::google::protobuf::internal::EnumEntry StatisticType_entries[] =
    {
        {{&StatisticType_names[0], 5}, 0},
        {{&StatisticType_names[5], 5}, 1},
        {{&StatisticType_names[10], 3}, 3},
        {{&StatisticType_names[13], 6}, 2},
};

static const int StatisticType_entries_by_number[] = {
    0,  // 0 -> count
    1,  // 1 -> gauge
    3,  // 2 -> timing
    2,  // 3 -> set
};

const std::string& StatisticType_Name(StatisticType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          StatisticType_entries, StatisticType_entries_by_number,
          4, StatisticType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      StatisticType_entries, StatisticType_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : StatisticType_strings[idx].get();
}

bool StatisticType_Parse(absl::string_view name, StatisticType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      StatisticType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<StatisticType>(int_value);
  }
  return success;
}
// ===================================================================

class Statistic::_Internal {
 public:
};

Statistic::Statistic(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Statistic)
}
inline PROTOBUF_NDEBUG_INLINE Statistic::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::Statistic& from_msg)
      : key_(arena, from.key_),
        _cached_size_{0} {}

Statistic::Statistic(
    ::google::protobuf::Arena* arena,
    const Statistic& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Statistic* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, value_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:valhalla.Statistic)
}
inline PROTOBUF_NDEBUG_INLINE Statistic::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_(arena),
        _cached_size_{0} {}

inline void Statistic::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::type_));
}
Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:valhalla.Statistic)
  SharedDtor(*this);
}
inline void Statistic::SharedDtor(MessageLite& self) {
  Statistic& this_ = static_cast<Statistic&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.key_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Statistic::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Statistic(arena);
}
constexpr auto Statistic::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Statistic),
                                            alignof(Statistic));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<19> Statistic::_class_data_ = {
    {
        &_Statistic_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Statistic::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Statistic>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Statistic::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Statistic>(), &Statistic::ByteSizeLong,
            &Statistic::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Statistic, _impl_._cached_size_),
        true,
    },
    "valhalla.Statistic",
};
const ::google::protobuf::internal::ClassData* Statistic::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 30, 2> Statistic::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::Statistic>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .valhalla.StatisticType type = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Statistic, _impl_.type_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Statistic, _impl_.key_)}},
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Statistic, _impl_.value_)}},
    // float frequency = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Statistic, _impl_.frequency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Statistic, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(Statistic, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float frequency = 3;
    {PROTOBUF_FIELD_OFFSET(Statistic, _impl_.frequency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // .valhalla.StatisticType type = 4;
    {PROTOBUF_FIELD_OFFSET(Statistic, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\22\3\0\0\0\0\0\0"
    "valhalla.Statistic"
    "key"
  }},
};

PROTOBUF_NOINLINE void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Statistic)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  ::memset(&_impl_.value_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Statistic::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Statistic& this_ = static_cast<const Statistic&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Statistic::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Statistic& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.Statistic)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string key = 1;
          if (!this_._internal_key().empty()) {
            const std::string& _s = this_._internal_key();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.Statistic.key");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double value = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_value()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_value(), target);
          }

          // float frequency = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_frequency()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_frequency(), target);
          }

          // .valhalla.StatisticType type = 4;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.Statistic)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Statistic::ByteSizeLong(const MessageLite& base) {
          const Statistic& this_ = static_cast<const Statistic&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Statistic::ByteSizeLong() const {
          const Statistic& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.Statistic)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string key = 1;
            if (!this_._internal_key().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_key());
            }
            // double value = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_value()) != 0) {
              total_size += 9;
            }
            // float frequency = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_frequency()) != 0) {
              total_size += 5;
            }
            // .valhalla.StatisticType type = 4;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Statistic::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Statistic*>(&to_msg);
  auto& from = static_cast<const Statistic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Statistic)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_value()) != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_frequency()) != 0) {
    _this->_impl_.frequency_ = from._impl_.frequency_;
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Statistic::InternalSwap(Statistic* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statistic, _impl_.type_)
      + sizeof(Statistic::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Statistic, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

// ===================================================================

class CodedDescription::_Internal {
 public:
};

CodedDescription::CodedDescription(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.CodedDescription)
}
inline PROTOBUF_NDEBUG_INLINE CodedDescription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::CodedDescription& from_msg)
      : description_(arena, from.description_),
        _cached_size_{0} {}

CodedDescription::CodedDescription(
    ::google::protobuf::Arena* arena,
    const CodedDescription& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CodedDescription* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:valhalla.CodedDescription)
}
inline PROTOBUF_NDEBUG_INLINE CodedDescription::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : description_(arena),
        _cached_size_{0} {}

inline void CodedDescription::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.code_ = {};
}
CodedDescription::~CodedDescription() {
  // @@protoc_insertion_point(destructor:valhalla.CodedDescription)
  SharedDtor(*this);
}
inline void CodedDescription::SharedDtor(MessageLite& self) {
  CodedDescription& this_ = static_cast<CodedDescription&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.description_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CodedDescription::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CodedDescription(arena);
}
constexpr auto CodedDescription::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CodedDescription),
                                            alignof(CodedDescription));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<26> CodedDescription::_class_data_ = {
    {
        &_CodedDescription_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CodedDescription::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<CodedDescription>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CodedDescription::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<CodedDescription>(), &CodedDescription::ByteSizeLong,
            &CodedDescription::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CodedDescription, _impl_._cached_size_),
        true,
    },
    "valhalla.CodedDescription",
};
const ::google::protobuf::internal::ClassData* CodedDescription::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 45, 2> CodedDescription::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::CodedDescription>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 code = 2;
    {::_pbi::TcParser::FastV64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CodedDescription, _impl_.code_)}},
    // string description = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CodedDescription, _impl_.description_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string description = 1;
    {PROTOBUF_FIELD_OFFSET(CodedDescription, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 code = 2;
    {PROTOBUF_FIELD_OFFSET(CodedDescription, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
    "\31\13\0\0\0\0\0\0"
    "valhalla.CodedDescription"
    "description"
  }},
};

PROTOBUF_NOINLINE void CodedDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.CodedDescription)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  _impl_.code_ = ::uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CodedDescription::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CodedDescription& this_ = static_cast<const CodedDescription&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CodedDescription::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CodedDescription& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.CodedDescription)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string description = 1;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.CodedDescription.description");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint64 code = 2;
          if (this_._internal_code() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_code(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.CodedDescription)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CodedDescription::ByteSizeLong(const MessageLite& base) {
          const CodedDescription& this_ = static_cast<const CodedDescription&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CodedDescription::ByteSizeLong() const {
          const CodedDescription& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.CodedDescription)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string description = 1;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // uint64 code = 2;
            if (this_._internal_code() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_code());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void CodedDescription::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CodedDescription*>(&to_msg);
  auto& from = static_cast<const CodedDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.CodedDescription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_code() != 0) {
    _this->_impl_.code_ = from._impl_.code_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CodedDescription::CopyFrom(const CodedDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.CodedDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CodedDescription::InternalSwap(CodedDescription* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
        swap(_impl_.code_, other->_impl_.code_);
}

// ===================================================================

class Info::_Internal {
 public:
};

Info::Info(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.Info)
}
inline PROTOBUF_NDEBUG_INLINE Info::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::Info& from_msg)
      : statistics_{visibility, arena, from.statistics_},
        errors_{visibility, arena, from.errors_},
        warnings_{visibility, arena, from.warnings_},
        _cached_size_{0} {}

Info::Info(
    ::google::protobuf::Arena* arena,
    const Info& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Info* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.is_service_ = from._impl_.is_service_;

  // @@protoc_insertion_point(copy_constructor:valhalla.Info)
}
inline PROTOBUF_NDEBUG_INLINE Info::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : statistics_{visibility, arena},
        errors_{visibility, arena},
        warnings_{visibility, arena},
        _cached_size_{0} {}

inline void Info::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.is_service_ = {};
}
Info::~Info() {
  // @@protoc_insertion_point(destructor:valhalla.Info)
  SharedDtor(*this);
}
inline void Info::SharedDtor(MessageLite& self) {
  Info& this_ = static_cast<Info&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Info::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Info(arena);
}
constexpr auto Info::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Info, _impl_.statistics_) +
          decltype(Info::_impl_.statistics_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Info, _impl_.errors_) +
          decltype(Info::_impl_.errors_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Info, _impl_.warnings_) +
          decltype(Info::_impl_.warnings_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Info), alignof(Info), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Info::PlacementNew_,
                                 sizeof(Info),
                                 alignof(Info));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<14> Info::_class_data_ = {
    {
        &_Info_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Info::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Info>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Info::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Info>(), &Info::ByteSizeLong,
            &Info::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Info, _impl_._cached_size_),
        true,
    },
    "valhalla.Info",
};
const ::google::protobuf::internal::ClassData* Info::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 3, 0, 2> Info::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::Info>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool is_service = 4;
    {::_pbi::TcParser::FastV8S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Info, _impl_.is_service_)}},
    // repeated .valhalla.Statistic statistics = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Info, _impl_.statistics_)}},
    // repeated .valhalla.CodedDescription errors = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Info, _impl_.errors_)}},
    // repeated .valhalla.CodedDescription warnings = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(Info, _impl_.warnings_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .valhalla.Statistic statistics = 1;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.statistics_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.CodedDescription errors = 2;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.errors_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.CodedDescription warnings = 3;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.warnings_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_service = 4;
    {PROTOBUF_FIELD_OFFSET(Info, _impl_.is_service_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::Statistic>()},
    {::_pbi::TcParser::GetTable<::valhalla::CodedDescription>()},
    {::_pbi::TcParser::GetTable<::valhalla::CodedDescription>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.Info)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.statistics_.Clear();
  _impl_.errors_.Clear();
  _impl_.warnings_.Clear();
  _impl_.is_service_ = false;
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Info::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Info& this_ = static_cast<const Info&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Info::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Info& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.Info)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .valhalla.Statistic statistics = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_statistics_size());
               i < n; i++) {
            const auto& repfield = this_._internal_statistics().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.CodedDescription errors = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_errors_size());
               i < n; i++) {
            const auto& repfield = this_._internal_errors().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.CodedDescription warnings = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_warnings_size());
               i < n; i++) {
            const auto& repfield = this_._internal_warnings().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // bool is_service = 4;
          if (this_._internal_is_service() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_is_service(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.Info)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Info::ByteSizeLong(const MessageLite& base) {
          const Info& this_ = static_cast<const Info&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Info::ByteSizeLong() const {
          const Info& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.Info)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .valhalla.Statistic statistics = 1;
            {
              total_size += 1UL * this_._internal_statistics_size();
              for (const auto& msg : this_._internal_statistics()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.CodedDescription errors = 2;
            {
              total_size += 1UL * this_._internal_errors_size();
              for (const auto& msg : this_._internal_errors()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.CodedDescription warnings = 3;
            {
              total_size += 1UL * this_._internal_warnings_size();
              for (const auto& msg : this_._internal_warnings()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // bool is_service = 4;
            if (this_._internal_is_service() != 0) {
              total_size += 2;
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Info::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Info*>(&to_msg);
  auto& from = static_cast<const Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.Info)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_statistics()->MergeFrom(
      from._internal_statistics());
  _this->_internal_mutable_errors()->MergeFrom(
      from._internal_errors());
  _this->_internal_mutable_warnings()->MergeFrom(
      from._internal_warnings());
  if (from._internal_is_service() != 0) {
    _this->_impl_.is_service_ = from._impl_.is_service_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Info::InternalSwap(Info* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.statistics_.InternalSwap(&other->_impl_.statistics_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
  _impl_.warnings_.InternalSwap(&other->_impl_.warnings_);
        swap(_impl_.is_service_, other->_impl_.is_service_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
