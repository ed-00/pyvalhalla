// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: transit.proto
// Protobuf C++ Version: 5.29.3

#include "transit.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {
namespace mjolnir {

inline constexpr Transit_StopPair::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        service_added_dates_{},
        service_days_of_week_{},
        service_except_dates_{},
        destination_onestop_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        operated_by_onestop_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        origin_onestop_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trip_headsign_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        block_id_{0u},
        destination_arrival_time_{0u},
        destination_graphid_{::uint64_t{0u}},
        origin_graphid_{::uint64_t{0u}},
        origin_departure_time_{0u},
        bikes_allowed_{false},
        wheelchair_accessible_{false},
        route_index_{0u},
        service_end_date_{0u},
        service_start_date_{0u},
        trip_id_{0u},
        shape_id_{0u},
        origin_dist_traveled_{0},
        destination_dist_traveled_{0},
        frequency_end_time_{0u},
        frequency_headway_seconds_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Transit_StopPair::Transit_StopPair(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Transit_StopPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transit_StopPairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transit_StopPairDefaultTypeInternal() {}
  union {
    Transit_StopPair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transit_StopPairDefaultTypeInternal _Transit_StopPair_default_instance_;

inline constexpr Transit_Shape::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        encoded_shape_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        shape_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Transit_Shape::Transit_Shape(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Transit_ShapeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transit_ShapeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transit_ShapeDefaultTypeInternal() {}
  union {
    Transit_Shape _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transit_ShapeDefaultTypeInternal _Transit_Shape_default_instance_;

inline constexpr Transit_Route::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        onestop_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        operated_by_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        operated_by_onestop_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        operated_by_website_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        route_desc_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        route_long_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        route_color_{0u},
        route_text_color_{0u},
        vehicle_type_{static_cast< ::valhalla::mjolnir::Transit_VehicleType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Transit_Route::Transit_Route(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Transit_RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transit_RouteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transit_RouteDefaultTypeInternal() {}
  union {
    Transit_Route _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transit_RouteDefaultTypeInternal _Transit_Route_default_instance_;

inline constexpr Transit_Node::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        onestop_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timezone_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        lon_{0},
        lat_{0},
        graphid_{::uint64_t{0u}},
        prev_type_graphid_{::uint64_t{0u}},
        osm_connecting_way_id_{::uint64_t{0u}},
        type_{0u},
        wheelchair_boarding_{false},
        generated_{false},
        osm_connecting_lon_{0},
        osm_connecting_lat_{0},
        traversability_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR Transit_Node::Transit_Node(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Transit_NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Transit_NodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Transit_NodeDefaultTypeInternal() {}
  union {
    Transit_Node _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Transit_NodeDefaultTypeInternal _Transit_Node_default_instance_;

inline constexpr Transit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nodes_{},
        stop_pairs_{},
        routes_{},
        shapes_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Transit::Transit(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TransitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransitDefaultTypeInternal() {}
  union {
    Transit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransitDefaultTypeInternal _Transit_default_instance_;
}  // namespace mjolnir
}  // namespace valhalla
namespace valhalla {
namespace mjolnir {
PROTOBUF_CONSTINIT const uint32_t Transit_VehicleType_internal_data_[] = {
    524288u, 0u, };
bool Transit_VehicleType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Transit_VehicleType_strings[8] = {};

static const char Transit_VehicleType_names[] = {
    "kBus"
    "kCableCar"
    "kFerry"
    "kFunicular"
    "kGondola"
    "kMetro"
    "kRail"
    "kTram"
};

static const ::google::protobuf::internal::EnumEntry Transit_VehicleType_entries[] =
    {
        {{&Transit_VehicleType_names[0], 4}, 3},
        {{&Transit_VehicleType_names[4], 9}, 5},
        {{&Transit_VehicleType_names[13], 6}, 4},
        {{&Transit_VehicleType_names[19], 10}, 7},
        {{&Transit_VehicleType_names[29], 8}, 6},
        {{&Transit_VehicleType_names[37], 6}, 1},
        {{&Transit_VehicleType_names[43], 5}, 2},
        {{&Transit_VehicleType_names[48], 5}, 0},
};

static const int Transit_VehicleType_entries_by_number[] = {
    7,  // 0 -> kTram
    5,  // 1 -> kMetro
    6,  // 2 -> kRail
    0,  // 3 -> kBus
    2,  // 4 -> kFerry
    1,  // 5 -> kCableCar
    4,  // 6 -> kGondola
    3,  // 7 -> kFunicular
};

const std::string& Transit_VehicleType_Name(Transit_VehicleType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Transit_VehicleType_entries, Transit_VehicleType_entries_by_number,
          8, Transit_VehicleType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Transit_VehicleType_entries, Transit_VehicleType_entries_by_number, 8,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Transit_VehicleType_strings[idx].get();
}

bool Transit_VehicleType_Parse(absl::string_view name, Transit_VehicleType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Transit_VehicleType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<Transit_VehicleType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Transit_VehicleType Transit::kTram;
constexpr Transit_VehicleType Transit::kMetro;
constexpr Transit_VehicleType Transit::kRail;
constexpr Transit_VehicleType Transit::kBus;
constexpr Transit_VehicleType Transit::kFerry;
constexpr Transit_VehicleType Transit::kCableCar;
constexpr Transit_VehicleType Transit::kGondola;
constexpr Transit_VehicleType Transit::kFunicular;
constexpr Transit_VehicleType Transit::VehicleType_MIN;
constexpr Transit_VehicleType Transit::VehicleType_MAX;
constexpr int Transit::VehicleType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Transit_Node::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Transit_Node>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_._has_bits_);
};

Transit_Node::Transit_Node(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit.Node)
}
inline PROTOBUF_NDEBUG_INLINE Transit_Node::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::mjolnir::Transit_Node& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        onestop_id_(arena, from.onestop_id_),
        timezone_(arena, from.timezone_) {}

Transit_Node::Transit_Node(
    ::google::protobuf::Arena* arena,
    const Transit_Node& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Transit_Node* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lon_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lon_),
           offsetof(Impl_, traversability_) -
               offsetof(Impl_, lon_) +
               sizeof(Impl_::traversability_));

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit.Node)
}
inline PROTOBUF_NDEBUG_INLINE Transit_Node::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        onestop_id_(arena),
        timezone_(arena) {}

inline void Transit_Node::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lon_),
           0,
           offsetof(Impl_, traversability_) -
               offsetof(Impl_, lon_) +
               sizeof(Impl_::traversability_));
}
Transit_Node::~Transit_Node() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit.Node)
  SharedDtor(*this);
}
inline void Transit_Node::SharedDtor(MessageLite& self) {
  Transit_Node& this_ = static_cast<Transit_Node&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.onestop_id_.Destroy();
  this_._impl_.timezone_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Transit_Node::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Transit_Node(arena);
}
constexpr auto Transit_Node::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Transit_Node),
                                            alignof(Transit_Node));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<30> Transit_Node::_class_data_ = {
    {
        &_Transit_Node_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Transit_Node::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Transit_Node>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Transit_Node::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Transit_Node>(), &Transit_Node::ByteSizeLong,
            &Transit_Node::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_._cached_size_),
        true,
    },
    "valhalla.mjolnir.Transit.Node",
};
const ::google::protobuf::internal::ClassData* Transit_Node::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 0, 2> Transit_Node::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Node>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional double lon = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 3, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.lon_)}},
    // optional double lat = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 4, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.lat_)}},
    // optional uint32 type = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 8, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.type_)}},
    // optional uint64 graphid = 4;
    {::_pbi::TcParser::FastV64S1,
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.graphid_)}},
    // optional uint64 prev_type_graphid = 5;
    {::_pbi::TcParser::FastV64S1,
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.prev_type_graphid_)}},
    // optional string name = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.name_)}},
    // optional string onestop_id = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.onestop_id_)}},
    // optional uint64 osm_connecting_way_id = 8;
    {::_pbi::TcParser::FastV64S1,
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.osm_connecting_way_id_)}},
    // optional string timezone = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 2, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.timezone_)}},
    // optional bool wheelchair_boarding = 10;
    {::_pbi::TcParser::FastV8S1,
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.wheelchair_boarding_)}},
    // optional bool generated = 11;
    {::_pbi::TcParser::FastV8S1,
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.generated_)}},
    // optional uint32 traversability = 12;
    {::_pbi::TcParser::FastV32S1,
     {96, 13, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.traversability_)}},
    // optional double osm_connecting_lon = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 11, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.osm_connecting_lon_)}},
    // optional double osm_connecting_lat = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 12, 0, PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.osm_connecting_lat_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional double lon = 1;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.lon_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double lat = 2;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.lat_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional uint32 type = 3;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.type_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 graphid = 4;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.graphid_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 prev_type_graphid = 5;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.prev_type_graphid_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string name = 6;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string onestop_id = 7;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.onestop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint64 osm_connecting_way_id = 8;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.osm_connecting_way_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string timezone = 9;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.timezone_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bool wheelchair_boarding = 10;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.wheelchair_boarding_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool generated = 11;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.generated_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 traversability = 12;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.traversability_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional double osm_connecting_lon = 13;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.osm_connecting_lon_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double osm_connecting_lat = 14;
    {PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.osm_connecting_lat_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Transit_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit.Node)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.timezone_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.lon_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.osm_connecting_way_id_) -
        reinterpret_cast<char*>(&_impl_.lon_)) + sizeof(_impl_.osm_connecting_way_id_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.traversability_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.traversability_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Transit_Node::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Transit_Node& this_ = static_cast<const Transit_Node&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Transit_Node::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Transit_Node& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit.Node)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional double lon = 1;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_lon(), target);
          }

          // optional double lat = 2;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_lat(), target);
          }

          // optional uint32 type = 3;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_type(), target);
          }

          // optional uint64 graphid = 4;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_graphid(), target);
          }

          // optional uint64 prev_type_graphid = 5;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                5, this_._internal_prev_type_graphid(), target);
          }

          // optional string name = 6;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_name();
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // optional string onestop_id = 7;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_onestop_id();
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // optional uint64 osm_connecting_way_id = 8;
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                8, this_._internal_osm_connecting_way_id(), target);
          }

          // optional string timezone = 9;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_timezone();
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // optional bool wheelchair_boarding = 10;
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_wheelchair_boarding(), target);
          }

          // optional bool generated = 11;
          if (cached_has_bits & 0x00000400u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_generated(), target);
          }

          // optional uint32 traversability = 12;
          if (cached_has_bits & 0x00002000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                12, this_._internal_traversability(), target);
          }

          // optional double osm_connecting_lon = 13;
          if (cached_has_bits & 0x00000800u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                13, this_._internal_osm_connecting_lon(), target);
          }

          // optional double osm_connecting_lat = 14;
          if (cached_has_bits & 0x00001000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                14, this_._internal_osm_connecting_lat(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit.Node)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Transit_Node::ByteSizeLong(const MessageLite& base) {
          const Transit_Node& this_ = static_cast<const Transit_Node&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Transit_Node::ByteSizeLong() const {
          const Transit_Node& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit.Node)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // optional string name = 6;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // optional string onestop_id = 7;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_onestop_id());
            }
            // optional string timezone = 9;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timezone());
            }
            // optional double lon = 1;
            if (cached_has_bits & 0x00000008u) {
              total_size += 9;
            }
            // optional double lat = 2;
            if (cached_has_bits & 0x00000010u) {
              total_size += 9;
            }
            // optional uint64 graphid = 4;
            if (cached_has_bits & 0x00000020u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_graphid());
            }
            // optional uint64 prev_type_graphid = 5;
            if (cached_has_bits & 0x00000040u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_prev_type_graphid());
            }
            // optional uint64 osm_connecting_way_id = 8;
            if (cached_has_bits & 0x00000080u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_osm_connecting_way_id());
            }
          }
          if (cached_has_bits & 0x00003f00u) {
            // optional uint32 type = 3;
            if (cached_has_bits & 0x00000100u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_type());
            }
            // optional bool wheelchair_boarding = 10;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2;
            }
            // optional bool generated = 11;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2;
            }
            // optional double osm_connecting_lon = 13;
            if (cached_has_bits & 0x00000800u) {
              total_size += 9;
            }
            // optional double osm_connecting_lat = 14;
            if (cached_has_bits & 0x00001000u) {
              total_size += 9;
            }
            // optional uint32 traversability = 12;
            if (cached_has_bits & 0x00002000u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_traversability());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Transit_Node::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Transit_Node*>(&to_msg);
  auto& from = static_cast<const Transit_Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit.Node)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_onestop_id(from._internal_onestop_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_timezone(from._internal_timezone());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lon_ = from._impl_.lon_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lat_ = from._impl_.lat_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.graphid_ = from._impl_.graphid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.prev_type_graphid_ = from._impl_.prev_type_graphid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.osm_connecting_way_id_ = from._impl_.osm_connecting_way_id_;
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.wheelchair_boarding_ = from._impl_.wheelchair_boarding_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.generated_ = from._impl_.generated_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.osm_connecting_lon_ = from._impl_.osm_connecting_lon_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.osm_connecting_lat_ = from._impl_.osm_connecting_lat_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.traversability_ = from._impl_.traversability_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Node::CopyFrom(const Transit_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Transit_Node::InternalSwap(Transit_Node* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.onestop_id_, &other->_impl_.onestop_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timezone_, &other->_impl_.timezone_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.traversability_)
      + sizeof(Transit_Node::_impl_.traversability_)
      - PROTOBUF_FIELD_OFFSET(Transit_Node, _impl_.lon_)>(
          reinterpret_cast<char*>(&_impl_.lon_),
          reinterpret_cast<char*>(&other->_impl_.lon_));
}

// ===================================================================

class Transit_StopPair::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Transit_StopPair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_._has_bits_);
};

Transit_StopPair::Transit_StopPair(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit.StopPair)
}
inline PROTOBUF_NDEBUG_INLINE Transit_StopPair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::mjolnir::Transit_StopPair& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        service_added_dates_{visibility, arena, from.service_added_dates_},
        service_days_of_week_{visibility, arena, from.service_days_of_week_},
        service_except_dates_{visibility, arena, from.service_except_dates_},
        destination_onestop_id_(arena, from.destination_onestop_id_),
        operated_by_onestop_id_(arena, from.operated_by_onestop_id_),
        origin_onestop_id_(arena, from.origin_onestop_id_),
        trip_headsign_(arena, from.trip_headsign_) {}

Transit_StopPair::Transit_StopPair(
    ::google::protobuf::Arena* arena,
    const Transit_StopPair& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Transit_StopPair* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, block_id_),
           offsetof(Impl_, frequency_headway_seconds_) -
               offsetof(Impl_, block_id_) +
               sizeof(Impl_::frequency_headway_seconds_));

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit.StopPair)
}
inline PROTOBUF_NDEBUG_INLINE Transit_StopPair::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        service_added_dates_{visibility, arena},
        service_days_of_week_{visibility, arena},
        service_except_dates_{visibility, arena},
        destination_onestop_id_(arena),
        operated_by_onestop_id_(arena),
        origin_onestop_id_(arena),
        trip_headsign_(arena) {}

inline void Transit_StopPair::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, block_id_),
           0,
           offsetof(Impl_, frequency_headway_seconds_) -
               offsetof(Impl_, block_id_) +
               sizeof(Impl_::frequency_headway_seconds_));
}
Transit_StopPair::~Transit_StopPair() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit.StopPair)
  SharedDtor(*this);
}
inline void Transit_StopPair::SharedDtor(MessageLite& self) {
  Transit_StopPair& this_ = static_cast<Transit_StopPair&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.destination_onestop_id_.Destroy();
  this_._impl_.operated_by_onestop_id_.Destroy();
  this_._impl_.origin_onestop_id_.Destroy();
  this_._impl_.trip_headsign_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Transit_StopPair::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Transit_StopPair(arena);
}
constexpr auto Transit_StopPair::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_added_dates_) +
          decltype(Transit_StopPair::_impl_.service_added_dates_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_days_of_week_) +
          decltype(Transit_StopPair::_impl_.service_days_of_week_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_except_dates_) +
          decltype(Transit_StopPair::_impl_.service_except_dates_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Transit_StopPair), alignof(Transit_StopPair), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Transit_StopPair::PlacementNew_,
                                 sizeof(Transit_StopPair),
                                 alignof(Transit_StopPair));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<34> Transit_StopPair::_class_data_ = {
    {
        &_Transit_StopPair_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Transit_StopPair::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Transit_StopPair>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Transit_StopPair::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Transit_StopPair>(), &Transit_StopPair::ByteSizeLong,
            &Transit_StopPair::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_._cached_size_),
        true,
    },
    "valhalla.mjolnir.Transit.StopPair",
};
const ::google::protobuf::internal::ClassData* Transit_StopPair::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 23, 0, 0, 2> Transit_StopPair::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_._has_bits_),
    0, // no _extensions_
    24, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4278452224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    23,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_StopPair>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool bikes_allowed = 1;
    {::_pbi::TcParser::FastV8S1,
     {8, 9, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.bikes_allowed_)}},
    // optional uint32 block_id = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.block_id_)}},
    // optional uint32 destination_arrival_time = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.destination_arrival_time_)}},
    // optional uint64 destination_graphid = 4;
    {::_pbi::TcParser::FastV64S1,
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.destination_graphid_)}},
    // optional string destination_onestop_id = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.destination_onestop_id_)}},
    // optional string operated_by_onestop_id = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 1, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.operated_by_onestop_id_)}},
    // optional uint32 origin_departure_time = 7;
    {::_pbi::TcParser::FastV32S1,
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.origin_departure_time_)}},
    // optional uint64 origin_graphid = 8;
    {::_pbi::TcParser::FastV64S1,
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.origin_graphid_)}},
    // optional string origin_onestop_id = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 2, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.origin_onestop_id_)}},
    // optional uint32 route_index = 10;
    {::_pbi::TcParser::FastV32S1,
     {80, 11, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.route_index_)}},
    // repeated uint32 service_added_dates = 11;
    {::_pbi::TcParser::FastV32R1,
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_added_dates_)}},
    // repeated bool service_days_of_week = 12;
    {::_pbi::TcParser::FastV8R1,
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_days_of_week_)}},
    // optional uint32 service_end_date = 13;
    {::_pbi::TcParser::FastV32S1,
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_end_date_)}},
    // repeated uint32 service_except_dates = 14;
    {::_pbi::TcParser::FastV32R1,
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_except_dates_)}},
    // optional uint32 service_start_date = 15;
    {::_pbi::TcParser::FastV32S1,
     {120, 13, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_start_date_)}},
    // optional string trip_headsign = 16;
    {::_pbi::TcParser::FastBS2,
     {386, 3, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.trip_headsign_)}},
    // optional uint32 trip_id = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 14, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.trip_id_)}},
    // optional bool wheelchair_accessible = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 10, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.wheelchair_accessible_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 shape_id = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 15, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.shape_id_)}},
    // optional float origin_dist_traveled = 21;
    {::_pbi::TcParser::FastF32S2,
     {429, 16, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.origin_dist_traveled_)}},
    // optional float destination_dist_traveled = 22;
    {::_pbi::TcParser::FastF32S2,
     {437, 17, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.destination_dist_traveled_)}},
    // optional uint32 frequency_end_time = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 18, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.frequency_end_time_)}},
    // optional uint32 frequency_headway_seconds = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 19, 0, PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.frequency_headway_seconds_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool bikes_allowed = 1;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.bikes_allowed_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 block_id = 2;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.block_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 destination_arrival_time = 3;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.destination_arrival_time_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 destination_graphid = 4;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.destination_graphid_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string destination_onestop_id = 5;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.destination_onestop_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string operated_by_onestop_id = 6;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.operated_by_onestop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 origin_departure_time = 7;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.origin_departure_time_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 origin_graphid = 8;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.origin_graphid_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string origin_onestop_id = 9;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.origin_onestop_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 route_index = 10;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.route_index_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated uint32 service_added_dates = 11;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_added_dates_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // repeated bool service_days_of_week = 12;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_days_of_week_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBool)},
    // optional uint32 service_end_date = 13;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_end_date_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated uint32 service_except_dates = 14;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_except_dates_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // optional uint32 service_start_date = 15;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.service_start_date_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string trip_headsign = 16;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.trip_headsign_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 trip_id = 17;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.trip_id_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool wheelchair_accessible = 18;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.wheelchair_accessible_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 shape_id = 20;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.shape_id_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float origin_dist_traveled = 21;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.origin_dist_traveled_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float destination_dist_traveled = 22;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.destination_dist_traveled_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 frequency_end_time = 23;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.frequency_end_time_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 frequency_headway_seconds = 24;
    {PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.frequency_headway_seconds_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Transit_StopPair::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit.StopPair)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_added_dates_.Clear();
  _impl_.service_days_of_week_.Clear();
  _impl_.service_except_dates_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.destination_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.operated_by_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.origin_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.trip_headsign_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.block_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.origin_graphid_) -
        reinterpret_cast<char*>(&_impl_.block_id_)) + sizeof(_impl_.origin_graphid_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.origin_departure_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.shape_id_) -
        reinterpret_cast<char*>(&_impl_.origin_departure_time_)) + sizeof(_impl_.shape_id_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.origin_dist_traveled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.frequency_headway_seconds_) -
        reinterpret_cast<char*>(&_impl_.origin_dist_traveled_)) + sizeof(_impl_.frequency_headway_seconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Transit_StopPair::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Transit_StopPair& this_ = static_cast<const Transit_StopPair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Transit_StopPair::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Transit_StopPair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit.StopPair)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional bool bikes_allowed = 1;
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_bikes_allowed(), target);
          }

          // optional uint32 block_id = 2;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_block_id(), target);
          }

          // optional uint32 destination_arrival_time = 3;
          if (cached_has_bits & 0x00000020u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_destination_arrival_time(), target);
          }

          // optional uint64 destination_graphid = 4;
          if (cached_has_bits & 0x00000040u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_destination_graphid(), target);
          }

          // optional string destination_onestop_id = 5;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_destination_onestop_id();
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // optional string operated_by_onestop_id = 6;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_operated_by_onestop_id();
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // optional uint32 origin_departure_time = 7;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                7, this_._internal_origin_departure_time(), target);
          }

          // optional uint64 origin_graphid = 8;
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                8, this_._internal_origin_graphid(), target);
          }

          // optional string origin_onestop_id = 9;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_origin_onestop_id();
            target = stream->WriteStringMaybeAliased(9, _s, target);
          }

          // optional uint32 route_index = 10;
          if (cached_has_bits & 0x00000800u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                10, this_._internal_route_index(), target);
          }

          // repeated uint32 service_added_dates = 11;
          for (int i = 0, n = this_._internal_service_added_dates_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                11, this_._internal_service_added_dates().Get(i), target);
          }

          // repeated bool service_days_of_week = 12;
          for (int i = 0, n = this_._internal_service_days_of_week_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_service_days_of_week().Get(i), target);
          }

          // optional uint32 service_end_date = 13;
          if (cached_has_bits & 0x00001000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                13, this_._internal_service_end_date(), target);
          }

          // repeated uint32 service_except_dates = 14;
          for (int i = 0, n = this_._internal_service_except_dates_size(); i < n; ++i) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                14, this_._internal_service_except_dates().Get(i), target);
          }

          // optional uint32 service_start_date = 15;
          if (cached_has_bits & 0x00002000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                15, this_._internal_service_start_date(), target);
          }

          // optional string trip_headsign = 16;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_trip_headsign();
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // optional uint32 trip_id = 17;
          if (cached_has_bits & 0x00004000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                17, this_._internal_trip_id(), target);
          }

          // optional bool wheelchair_accessible = 18;
          if (cached_has_bits & 0x00000400u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                18, this_._internal_wheelchair_accessible(), target);
          }

          // optional uint32 shape_id = 20;
          if (cached_has_bits & 0x00008000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                20, this_._internal_shape_id(), target);
          }

          // optional float origin_dist_traveled = 21;
          if (cached_has_bits & 0x00010000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                21, this_._internal_origin_dist_traveled(), target);
          }

          // optional float destination_dist_traveled = 22;
          if (cached_has_bits & 0x00020000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                22, this_._internal_destination_dist_traveled(), target);
          }

          // optional uint32 frequency_end_time = 23;
          if (cached_has_bits & 0x00040000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                23, this_._internal_frequency_end_time(), target);
          }

          // optional uint32 frequency_headway_seconds = 24;
          if (cached_has_bits & 0x00080000u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                24, this_._internal_frequency_headway_seconds(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit.StopPair)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Transit_StopPair::ByteSizeLong(const MessageLite& base) {
          const Transit_StopPair& this_ = static_cast<const Transit_StopPair&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Transit_StopPair::ByteSizeLong() const {
          const Transit_StopPair& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit.StopPair)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated uint32 service_added_dates = 11;
            {
              std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
                  this_._internal_service_added_dates());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_service_added_dates_size());
              total_size += tag_size + data_size;
            }
            // repeated bool service_days_of_week = 12;
            {
              std::size_t data_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_service_days_of_week_size());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_service_days_of_week_size());
              total_size += tag_size + data_size;
            }
            // repeated uint32 service_except_dates = 14;
            {
              std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
                  this_._internal_service_except_dates());
              std::size_t tag_size = std::size_t{1} *
                  ::_pbi::FromIntSize(this_._internal_service_except_dates_size());
              total_size += tag_size + data_size;
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // optional string destination_onestop_id = 5;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_destination_onestop_id());
            }
            // optional string operated_by_onestop_id = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_operated_by_onestop_id());
            }
            // optional string origin_onestop_id = 9;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_origin_onestop_id());
            }
            // optional string trip_headsign = 16;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_trip_headsign());
            }
            // optional uint32 block_id = 2;
            if (cached_has_bits & 0x00000010u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_block_id());
            }
            // optional uint32 destination_arrival_time = 3;
            if (cached_has_bits & 0x00000020u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_destination_arrival_time());
            }
            // optional uint64 destination_graphid = 4;
            if (cached_has_bits & 0x00000040u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_destination_graphid());
            }
            // optional uint64 origin_graphid = 8;
            if (cached_has_bits & 0x00000080u) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_origin_graphid());
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // optional uint32 origin_departure_time = 7;
            if (cached_has_bits & 0x00000100u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_origin_departure_time());
            }
            // optional bool bikes_allowed = 1;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2;
            }
            // optional bool wheelchair_accessible = 18;
            if (cached_has_bits & 0x00000400u) {
              total_size += 3;
            }
            // optional uint32 route_index = 10;
            if (cached_has_bits & 0x00000800u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_route_index());
            }
            // optional uint32 service_end_date = 13;
            if (cached_has_bits & 0x00001000u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_service_end_date());
            }
            // optional uint32 service_start_date = 15;
            if (cached_has_bits & 0x00002000u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_service_start_date());
            }
            // optional uint32 trip_id = 17;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_trip_id());
            }
            // optional uint32 shape_id = 20;
            if (cached_has_bits & 0x00008000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_shape_id());
            }
          }
          if (cached_has_bits & 0x000f0000u) {
            // optional float origin_dist_traveled = 21;
            if (cached_has_bits & 0x00010000u) {
              total_size += 6;
            }
            // optional float destination_dist_traveled = 22;
            if (cached_has_bits & 0x00020000u) {
              total_size += 6;
            }
            // optional uint32 frequency_end_time = 23;
            if (cached_has_bits & 0x00040000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_frequency_end_time());
            }
            // optional uint32 frequency_headway_seconds = 24;
            if (cached_has_bits & 0x00080000u) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_frequency_headway_seconds());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Transit_StopPair::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Transit_StopPair*>(&to_msg);
  auto& from = static_cast<const Transit_StopPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit.StopPair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_service_added_dates()->MergeFrom(from._internal_service_added_dates());
  _this->_internal_mutable_service_days_of_week()->MergeFrom(from._internal_service_days_of_week());
  _this->_internal_mutable_service_except_dates()->MergeFrom(from._internal_service_except_dates());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_destination_onestop_id(from._internal_destination_onestop_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_operated_by_onestop_id(from._internal_operated_by_onestop_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_origin_onestop_id(from._internal_origin_onestop_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_trip_headsign(from._internal_trip_headsign());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.block_id_ = from._impl_.block_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.destination_arrival_time_ = from._impl_.destination_arrival_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.destination_graphid_ = from._impl_.destination_graphid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.origin_graphid_ = from._impl_.origin_graphid_;
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.origin_departure_time_ = from._impl_.origin_departure_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bikes_allowed_ = from._impl_.bikes_allowed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.wheelchair_accessible_ = from._impl_.wheelchair_accessible_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.route_index_ = from._impl_.route_index_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.service_end_date_ = from._impl_.service_end_date_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.service_start_date_ = from._impl_.service_start_date_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.trip_id_ = from._impl_.trip_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.shape_id_ = from._impl_.shape_id_;
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.origin_dist_traveled_ = from._impl_.origin_dist_traveled_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.destination_dist_traveled_ = from._impl_.destination_dist_traveled_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.frequency_end_time_ = from._impl_.frequency_end_time_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.frequency_headway_seconds_ = from._impl_.frequency_headway_seconds_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_StopPair::CopyFrom(const Transit_StopPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit.StopPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Transit_StopPair::InternalSwap(Transit_StopPair* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.service_added_dates_.InternalSwap(&other->_impl_.service_added_dates_);
  _impl_.service_days_of_week_.InternalSwap(&other->_impl_.service_days_of_week_);
  _impl_.service_except_dates_.InternalSwap(&other->_impl_.service_except_dates_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_onestop_id_, &other->_impl_.destination_onestop_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operated_by_onestop_id_, &other->_impl_.operated_by_onestop_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.origin_onestop_id_, &other->_impl_.origin_onestop_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trip_headsign_, &other->_impl_.trip_headsign_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.frequency_headway_seconds_)
      + sizeof(Transit_StopPair::_impl_.frequency_headway_seconds_)
      - PROTOBUF_FIELD_OFFSET(Transit_StopPair, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

// ===================================================================

class Transit_Route::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Transit_Route>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_._has_bits_);
};

Transit_Route::Transit_Route(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit.Route)
}
inline PROTOBUF_NDEBUG_INLINE Transit_Route::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::mjolnir::Transit_Route& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        onestop_id_(arena, from.onestop_id_),
        operated_by_name_(arena, from.operated_by_name_),
        operated_by_onestop_id_(arena, from.operated_by_onestop_id_),
        operated_by_website_(arena, from.operated_by_website_),
        route_desc_(arena, from.route_desc_),
        route_long_name_(arena, from.route_long_name_) {}

Transit_Route::Transit_Route(
    ::google::protobuf::Arena* arena,
    const Transit_Route& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Transit_Route* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, route_color_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, route_color_),
           offsetof(Impl_, vehicle_type_) -
               offsetof(Impl_, route_color_) +
               sizeof(Impl_::vehicle_type_));

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit.Route)
}
inline PROTOBUF_NDEBUG_INLINE Transit_Route::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        onestop_id_(arena),
        operated_by_name_(arena),
        operated_by_onestop_id_(arena),
        operated_by_website_(arena),
        route_desc_(arena),
        route_long_name_(arena) {}

inline void Transit_Route::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, route_color_),
           0,
           offsetof(Impl_, vehicle_type_) -
               offsetof(Impl_, route_color_) +
               sizeof(Impl_::vehicle_type_));
}
Transit_Route::~Transit_Route() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit.Route)
  SharedDtor(*this);
}
inline void Transit_Route::SharedDtor(MessageLite& self) {
  Transit_Route& this_ = static_cast<Transit_Route&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.onestop_id_.Destroy();
  this_._impl_.operated_by_name_.Destroy();
  this_._impl_.operated_by_onestop_id_.Destroy();
  this_._impl_.operated_by_website_.Destroy();
  this_._impl_.route_desc_.Destroy();
  this_._impl_.route_long_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Transit_Route::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Transit_Route(arena);
}
constexpr auto Transit_Route::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Transit_Route),
                                            alignof(Transit_Route));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<31> Transit_Route::_class_data_ = {
    {
        &_Transit_Route_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Transit_Route::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Transit_Route>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Transit_Route::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Transit_Route>(), &Transit_Route::ByteSizeLong,
            &Transit_Route::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_._cached_size_),
        true,
    },
    "valhalla.mjolnir.Transit.Route",
};
const ::google::protobuf::internal::ClassData* Transit_Route::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 1, 0, 2> Transit_Route::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Route>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string name = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.name_)}},
    // optional string onestop_id = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.onestop_id_)}},
    // optional string operated_by_name = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.operated_by_name_)}},
    // optional string operated_by_onestop_id = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.operated_by_onestop_id_)}},
    // optional string operated_by_website = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 4, 0, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.operated_by_website_)}},
    // optional uint32 route_color = 6;
    {::_pbi::TcParser::FastV32S1,
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.route_color_)}},
    // optional string route_desc = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 5, 0, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.route_desc_)}},
    // optional string route_long_name = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 6, 0, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.route_long_name_)}},
    // optional uint32 route_text_color = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.route_text_color_)}},
    // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
    {::_pbi::TcParser::FastEr0S1,
     {80, 9, 7, PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.vehicle_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string onestop_id = 2;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.onestop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string operated_by_name = 3;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.operated_by_name_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string operated_by_onestop_id = 4;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.operated_by_onestop_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string operated_by_website = 5;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.operated_by_website_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 route_color = 6;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.route_color_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string route_desc = 7;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.route_desc_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string route_long_name = 8;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.route_long_name_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 route_text_color = 9;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.route_text_color_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
    {PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.vehicle_type_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
  }}, {{
    {0, 8},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Transit_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit.Route)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.operated_by_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.operated_by_onestop_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.operated_by_website_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.route_desc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.route_long_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.route_color_ = 0u;
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.route_text_color_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.vehicle_type_) -
        reinterpret_cast<char*>(&_impl_.route_text_color_)) + sizeof(_impl_.vehicle_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Transit_Route::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Transit_Route& this_ = static_cast<const Transit_Route&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Transit_Route::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Transit_Route& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit.Route)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string name = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_name();
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // optional string onestop_id = 2;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_onestop_id();
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // optional string operated_by_name = 3;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_operated_by_name();
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // optional string operated_by_onestop_id = 4;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_operated_by_onestop_id();
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // optional string operated_by_website = 5;
          if (cached_has_bits & 0x00000010u) {
            const std::string& _s = this_._internal_operated_by_website();
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // optional uint32 route_color = 6;
          if (cached_has_bits & 0x00000080u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                6, this_._internal_route_color(), target);
          }

          // optional string route_desc = 7;
          if (cached_has_bits & 0x00000020u) {
            const std::string& _s = this_._internal_route_desc();
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // optional string route_long_name = 8;
          if (cached_has_bits & 0x00000040u) {
            const std::string& _s = this_._internal_route_long_name();
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // optional uint32 route_text_color = 9;
          if (cached_has_bits & 0x00000100u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                9, this_._internal_route_text_color(), target);
          }

          // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
          if (cached_has_bits & 0x00000200u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_vehicle_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit.Route)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Transit_Route::ByteSizeLong(const MessageLite& base) {
          const Transit_Route& this_ = static_cast<const Transit_Route&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Transit_Route::ByteSizeLong() const {
          const Transit_Route& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit.Route)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // optional string name = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // optional string onestop_id = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_onestop_id());
            }
            // optional string operated_by_name = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_operated_by_name());
            }
            // optional string operated_by_onestop_id = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_operated_by_onestop_id());
            }
            // optional string operated_by_website = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_operated_by_website());
            }
            // optional string route_desc = 7;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_route_desc());
            }
            // optional string route_long_name = 8;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_route_long_name());
            }
            // optional uint32 route_color = 6;
            if (cached_has_bits & 0x00000080u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_route_color());
            }
          }
          if (cached_has_bits & 0x00000300u) {
            // optional uint32 route_text_color = 9;
            if (cached_has_bits & 0x00000100u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_route_text_color());
            }
            // optional .valhalla.mjolnir.Transit.VehicleType vehicle_type = 10;
            if (cached_has_bits & 0x00000200u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_vehicle_type());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Transit_Route::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Transit_Route*>(&to_msg);
  auto& from = static_cast<const Transit_Route&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit.Route)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_onestop_id(from._internal_onestop_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_operated_by_name(from._internal_operated_by_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_operated_by_onestop_id(from._internal_operated_by_onestop_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_operated_by_website(from._internal_operated_by_website());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_route_desc(from._internal_route_desc());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_route_long_name(from._internal_route_long_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.route_color_ = from._impl_.route_color_;
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.route_text_color_ = from._impl_.route_text_color_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.vehicle_type_ = from._impl_.vehicle_type_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Route::CopyFrom(const Transit_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Transit_Route::InternalSwap(Transit_Route* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.onestop_id_, &other->_impl_.onestop_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operated_by_name_, &other->_impl_.operated_by_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operated_by_onestop_id_, &other->_impl_.operated_by_onestop_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operated_by_website_, &other->_impl_.operated_by_website_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.route_desc_, &other->_impl_.route_desc_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.route_long_name_, &other->_impl_.route_long_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.vehicle_type_)
      + sizeof(Transit_Route::_impl_.vehicle_type_)
      - PROTOBUF_FIELD_OFFSET(Transit_Route, _impl_.route_color_)>(
          reinterpret_cast<char*>(&_impl_.route_color_),
          reinterpret_cast<char*>(&other->_impl_.route_color_));
}

// ===================================================================

class Transit_Shape::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Transit_Shape>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Transit_Shape, _impl_._has_bits_);
};

Transit_Shape::Transit_Shape(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit.Shape)
}
inline PROTOBUF_NDEBUG_INLINE Transit_Shape::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::mjolnir::Transit_Shape& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        encoded_shape_(arena, from.encoded_shape_) {}

Transit_Shape::Transit_Shape(
    ::google::protobuf::Arena* arena,
    const Transit_Shape& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Transit_Shape* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.shape_id_ = from._impl_.shape_id_;

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit.Shape)
}
inline PROTOBUF_NDEBUG_INLINE Transit_Shape::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        encoded_shape_(arena) {}

inline void Transit_Shape::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.shape_id_ = {};
}
Transit_Shape::~Transit_Shape() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit.Shape)
  SharedDtor(*this);
}
inline void Transit_Shape::SharedDtor(MessageLite& self) {
  Transit_Shape& this_ = static_cast<Transit_Shape&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.encoded_shape_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Transit_Shape::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Transit_Shape(arena);
}
constexpr auto Transit_Shape::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Transit_Shape),
                                            alignof(Transit_Shape));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<31> Transit_Shape::_class_data_ = {
    {
        &_Transit_Shape_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Transit_Shape::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Transit_Shape>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Transit_Shape::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Transit_Shape>(), &Transit_Shape::ByteSizeLong,
            &Transit_Shape::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Transit_Shape, _impl_._cached_size_),
        true,
    },
    "valhalla.mjolnir.Transit.Shape",
};
const ::google::protobuf::internal::ClassData* Transit_Shape::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Transit_Shape::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transit_Shape, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Shape>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bytes encoded_shape = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Transit_Shape, _impl_.encoded_shape_)}},
    // optional uint32 shape_id = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(Transit_Shape, _impl_.shape_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 shape_id = 1;
    {PROTOBUF_FIELD_OFFSET(Transit_Shape, _impl_.shape_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes encoded_shape = 2;
    {PROTOBUF_FIELD_OFFSET(Transit_Shape, _impl_.encoded_shape_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Transit_Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit.Shape)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.encoded_shape_.ClearNonDefaultToEmpty();
  }
  _impl_.shape_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Transit_Shape::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Transit_Shape& this_ = static_cast<const Transit_Shape&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Transit_Shape::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Transit_Shape& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit.Shape)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional uint32 shape_id = 1;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_shape_id(), target);
          }

          // optional bytes encoded_shape = 2;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_encoded_shape();
            target = stream->WriteBytesMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit.Shape)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Transit_Shape::ByteSizeLong(const MessageLite& base) {
          const Transit_Shape& this_ = static_cast<const Transit_Shape&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Transit_Shape::ByteSizeLong() const {
          const Transit_Shape& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit.Shape)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional bytes encoded_shape = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                              this_._internal_encoded_shape());
            }
            // optional uint32 shape_id = 1;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_shape_id());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Transit_Shape::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Transit_Shape*>(&to_msg);
  auto& from = static_cast<const Transit_Shape&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit.Shape)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_encoded_shape(from._internal_encoded_shape());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.shape_id_ = from._impl_.shape_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit_Shape::CopyFrom(const Transit_Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Transit_Shape::InternalSwap(Transit_Shape* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encoded_shape_, &other->_impl_.encoded_shape_, arena);
        swap(_impl_.shape_id_, other->_impl_.shape_id_);
}

// ===================================================================

class Transit::_Internal {
 public:
};

Transit::Transit(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.mjolnir.Transit)
}
inline PROTOBUF_NDEBUG_INLINE Transit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::mjolnir::Transit& from_msg)
      : nodes_{visibility, arena, from.nodes_},
        stop_pairs_{visibility, arena, from.stop_pairs_},
        routes_{visibility, arena, from.routes_},
        shapes_{visibility, arena, from.shapes_},
        _cached_size_{0} {}

Transit::Transit(
    ::google::protobuf::Arena* arena,
    const Transit& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Transit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:valhalla.mjolnir.Transit)
}
inline PROTOBUF_NDEBUG_INLINE Transit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nodes_{visibility, arena},
        stop_pairs_{visibility, arena},
        routes_{visibility, arena},
        shapes_{visibility, arena},
        _cached_size_{0} {}

inline void Transit::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Transit::~Transit() {
  // @@protoc_insertion_point(destructor:valhalla.mjolnir.Transit)
  SharedDtor(*this);
}
inline void Transit::SharedDtor(MessageLite& self) {
  Transit& this_ = static_cast<Transit&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Transit::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Transit(arena);
}
constexpr auto Transit::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Transit, _impl_.nodes_) +
          decltype(Transit::_impl_.nodes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Transit, _impl_.stop_pairs_) +
          decltype(Transit::_impl_.stop_pairs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Transit, _impl_.routes_) +
          decltype(Transit::_impl_.routes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Transit, _impl_.shapes_) +
          decltype(Transit::_impl_.shapes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(Transit), alignof(Transit), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Transit::PlacementNew_,
                                 sizeof(Transit),
                                 alignof(Transit));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<25> Transit::_class_data_ = {
    {
        &_Transit_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Transit::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<Transit>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Transit::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<Transit>(), &Transit::ByteSizeLong,
            &Transit::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Transit, _impl_._cached_size_),
        true,
    },
    "valhalla.mjolnir.Transit",
};
const ::google::protobuf::internal::ClassData* Transit::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> Transit::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(Transit, _impl_.shapes_)}},
    // repeated .valhalla.mjolnir.Transit.Node nodes = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Transit, _impl_.nodes_)}},
    // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Transit, _impl_.stop_pairs_)}},
    // repeated .valhalla.mjolnir.Transit.Route routes = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(Transit, _impl_.routes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .valhalla.mjolnir.Transit.Node nodes = 1;
    {PROTOBUF_FIELD_OFFSET(Transit, _impl_.nodes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
    {PROTOBUF_FIELD_OFFSET(Transit, _impl_.stop_pairs_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.mjolnir.Transit.Route routes = 3;
    {PROTOBUF_FIELD_OFFSET(Transit, _impl_.routes_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
    {PROTOBUF_FIELD_OFFSET(Transit, _impl_.shapes_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Node>()},
    {::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_StopPair>()},
    {::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Route>()},
    {::_pbi::TcParser::GetTable<::valhalla::mjolnir::Transit_Shape>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Transit::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.mjolnir.Transit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _impl_.stop_pairs_.Clear();
  _impl_.routes_.Clear();
  _impl_.shapes_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Transit::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Transit& this_ = static_cast<const Transit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Transit::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Transit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.mjolnir.Transit)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .valhalla.mjolnir.Transit.Node nodes = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_nodes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_nodes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_stop_pairs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_stop_pairs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.mjolnir.Transit.Route routes = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_routes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_routes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_shapes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_shapes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.mjolnir.Transit)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Transit::ByteSizeLong(const MessageLite& base) {
          const Transit& this_ = static_cast<const Transit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Transit::ByteSizeLong() const {
          const Transit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.mjolnir.Transit)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .valhalla.mjolnir.Transit.Node nodes = 1;
            {
              total_size += 1UL * this_._internal_nodes_size();
              for (const auto& msg : this_._internal_nodes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.mjolnir.Transit.StopPair stop_pairs = 2;
            {
              total_size += 1UL * this_._internal_stop_pairs_size();
              for (const auto& msg : this_._internal_stop_pairs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.mjolnir.Transit.Route routes = 3;
            {
              total_size += 1UL * this_._internal_routes_size();
              for (const auto& msg : this_._internal_routes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.mjolnir.Transit.Shape shapes = 4;
            {
              total_size += 1UL * this_._internal_shapes_size();
              for (const auto& msg : this_._internal_shapes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void Transit::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Transit*>(&to_msg);
  auto& from = static_cast<const Transit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.mjolnir.Transit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nodes()->MergeFrom(
      from._internal_nodes());
  _this->_internal_mutable_stop_pairs()->MergeFrom(
      from._internal_stop_pairs());
  _this->_internal_mutable_routes()->MergeFrom(
      from._internal_routes());
  _this->_internal_mutable_shapes()->MergeFrom(
      from._internal_shapes());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Transit::CopyFrom(const Transit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.mjolnir.Transit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Transit::InternalSwap(Transit* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  _impl_.stop_pairs_.InternalSwap(&other->_impl_.stop_pairs_);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
  _impl_.shapes_.InternalSwap(&other->_impl_.shapes_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mjolnir
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
