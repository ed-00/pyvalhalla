// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: sign.proto
// Protobuf C++ Version: 5.29.3

#include "sign.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {

inline constexpr TripSignElement::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        text_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pronunciation_{nullptr},
        is_route_number_{false},
        consecutive_count_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR TripSignElement::TripSignElement(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TripSignElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripSignElementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripSignElementDefaultTypeInternal() {}
  union {
    TripSignElement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripSignElementDefaultTypeInternal _TripSignElement_default_instance_;

inline constexpr TripSign::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : exit_numbers_{},
        exit_onto_streets_{},
        exit_toward_locations_{},
        exit_names_{},
        guide_onto_streets_{},
        guide_toward_locations_{},
        junction_names_{},
        guidance_view_junctions_{},
        guidance_view_signboards_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TripSign::TripSign(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TripSignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripSignDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripSignDefaultTypeInternal() {}
  union {
    TripSign _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripSignDefaultTypeInternal _TripSign_default_instance_;
}  // namespace valhalla
namespace valhalla {
// ===================================================================

class TripSignElement::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TripSignElement>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_._has_bits_);
};

void TripSignElement::clear_pronunciation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pronunciation_ != nullptr) _impl_.pronunciation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TripSignElement::TripSignElement(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TripSignElement)
}
inline PROTOBUF_NDEBUG_INLINE TripSignElement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::TripSignElement& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        text_(arena, from.text_) {}

TripSignElement::TripSignElement(
    ::google::protobuf::Arena* arena,
    const TripSignElement& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TripSignElement* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pronunciation_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::valhalla::Pronunciation>(
                              arena, *from._impl_.pronunciation_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_route_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_route_number_),
           offsetof(Impl_, consecutive_count_) -
               offsetof(Impl_, is_route_number_) +
               sizeof(Impl_::consecutive_count_));

  // @@protoc_insertion_point(copy_constructor:valhalla.TripSignElement)
}
inline PROTOBUF_NDEBUG_INLINE TripSignElement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        text_(arena) {}

inline void TripSignElement::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pronunciation_),
           0,
           offsetof(Impl_, consecutive_count_) -
               offsetof(Impl_, pronunciation_) +
               sizeof(Impl_::consecutive_count_));
}
TripSignElement::~TripSignElement() {
  // @@protoc_insertion_point(destructor:valhalla.TripSignElement)
  SharedDtor(*this);
}
inline void TripSignElement::SharedDtor(MessageLite& self) {
  TripSignElement& this_ = static_cast<TripSignElement&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.text_.Destroy();
  delete this_._impl_.pronunciation_;
  this_._impl_.~Impl_();
}

inline void* TripSignElement::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TripSignElement(arena);
}
constexpr auto TripSignElement::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TripSignElement),
                                            alignof(TripSignElement));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<25> TripSignElement::_class_data_ = {
    {
        &_TripSignElement_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TripSignElement::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<TripSignElement>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TripSignElement::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<TripSignElement>(), &TripSignElement::ByteSizeLong,
            &TripSignElement::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_._cached_size_),
        true,
    },
    "valhalla.TripSignElement",
};
const ::google::protobuf::internal::ClassData* TripSignElement::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 37, 2> TripSignElement::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::TripSignElement>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .valhalla.Pronunciation pronunciation = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.pronunciation_)}},
    // string text = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.text_)}},
    // bool is_route_number = 2;
    {::_pbi::TcParser::FastV8S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.is_route_number_)}},
    // uint32 consecutive_count = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.consecutive_count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string text = 1;
    {PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.text_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_route_number = 2;
    {PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.is_route_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 consecutive_count = 3;
    {PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.consecutive_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .valhalla.Pronunciation pronunciation = 4;
    {PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.pronunciation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::Pronunciation>()},
  }}, {{
    "\30\4\0\0\0\0\0\0"
    "valhalla.TripSignElement"
    "text"
  }},
};

PROTOBUF_NOINLINE void TripSignElement::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TripSignElement)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pronunciation_ != nullptr);
    _impl_.pronunciation_->Clear();
  }
  ::memset(&_impl_.is_route_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.consecutive_count_) -
      reinterpret_cast<char*>(&_impl_.is_route_number_)) + sizeof(_impl_.consecutive_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TripSignElement::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TripSignElement& this_ = static_cast<const TripSignElement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TripSignElement::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TripSignElement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.TripSignElement)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string text = 1;
          if (!this_._internal_text().empty()) {
            const std::string& _s = this_._internal_text();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.TripSignElement.text");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // bool is_route_number = 2;
          if (this_._internal_is_route_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_is_route_number(), target);
          }

          // uint32 consecutive_count = 3;
          if (this_._internal_consecutive_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_consecutive_count(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .valhalla.Pronunciation pronunciation = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.pronunciation_, this_._impl_.pronunciation_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.TripSignElement)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TripSignElement::ByteSizeLong(const MessageLite& base) {
          const TripSignElement& this_ = static_cast<const TripSignElement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TripSignElement::ByteSizeLong() const {
          const TripSignElement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.TripSignElement)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string text = 1;
            if (!this_._internal_text().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_text());
            }
          }
           {
            // .valhalla.Pronunciation pronunciation = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pronunciation_);
            }
          }
           {
            // bool is_route_number = 2;
            if (this_._internal_is_route_number() != 0) {
              total_size += 2;
            }
            // uint32 consecutive_count = 3;
            if (this_._internal_consecutive_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_consecutive_count());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TripSignElement::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TripSignElement*>(&to_msg);
  auto& from = static_cast<const TripSignElement&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TripSignElement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pronunciation_ != nullptr);
    if (_this->_impl_.pronunciation_ == nullptr) {
      _this->_impl_.pronunciation_ =
          ::google::protobuf::MessageLite::CopyConstruct<::valhalla::Pronunciation>(arena, *from._impl_.pronunciation_);
    } else {
      _this->_impl_.pronunciation_->MergeFrom(*from._impl_.pronunciation_);
    }
  }
  if (from._internal_is_route_number() != 0) {
    _this->_impl_.is_route_number_ = from._impl_.is_route_number_;
  }
  if (from._internal_consecutive_count() != 0) {
    _this->_impl_.consecutive_count_ = from._impl_.consecutive_count_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TripSignElement::CopyFrom(const TripSignElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TripSignElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TripSignElement::InternalSwap(TripSignElement* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, &other->_impl_.text_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.consecutive_count_)
      + sizeof(TripSignElement::_impl_.consecutive_count_)
      - PROTOBUF_FIELD_OFFSET(TripSignElement, _impl_.pronunciation_)>(
          reinterpret_cast<char*>(&_impl_.pronunciation_),
          reinterpret_cast<char*>(&other->_impl_.pronunciation_));
}

// ===================================================================

class TripSign::_Internal {
 public:
};

TripSign::TripSign(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.TripSign)
}
inline PROTOBUF_NDEBUG_INLINE TripSign::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::TripSign& from_msg)
      : exit_numbers_{visibility, arena, from.exit_numbers_},
        exit_onto_streets_{visibility, arena, from.exit_onto_streets_},
        exit_toward_locations_{visibility, arena, from.exit_toward_locations_},
        exit_names_{visibility, arena, from.exit_names_},
        guide_onto_streets_{visibility, arena, from.guide_onto_streets_},
        guide_toward_locations_{visibility, arena, from.guide_toward_locations_},
        junction_names_{visibility, arena, from.junction_names_},
        guidance_view_junctions_{visibility, arena, from.guidance_view_junctions_},
        guidance_view_signboards_{visibility, arena, from.guidance_view_signboards_},
        _cached_size_{0} {}

TripSign::TripSign(
    ::google::protobuf::Arena* arena,
    const TripSign& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TripSign* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:valhalla.TripSign)
}
inline PROTOBUF_NDEBUG_INLINE TripSign::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : exit_numbers_{visibility, arena},
        exit_onto_streets_{visibility, arena},
        exit_toward_locations_{visibility, arena},
        exit_names_{visibility, arena},
        guide_onto_streets_{visibility, arena},
        guide_toward_locations_{visibility, arena},
        junction_names_{visibility, arena},
        guidance_view_junctions_{visibility, arena},
        guidance_view_signboards_{visibility, arena},
        _cached_size_{0} {}

inline void TripSign::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TripSign::~TripSign() {
  // @@protoc_insertion_point(destructor:valhalla.TripSign)
  SharedDtor(*this);
}
inline void TripSign::SharedDtor(MessageLite& self) {
  TripSign& this_ = static_cast<TripSign&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TripSign::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TripSign(arena);
}
constexpr auto TripSign::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_numbers_) +
          decltype(TripSign::_impl_.exit_numbers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_onto_streets_) +
          decltype(TripSign::_impl_.exit_onto_streets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_toward_locations_) +
          decltype(TripSign::_impl_.exit_toward_locations_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_names_) +
          decltype(TripSign::_impl_.exit_names_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_onto_streets_) +
          decltype(TripSign::_impl_.guide_onto_streets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_toward_locations_) +
          decltype(TripSign::_impl_.guide_toward_locations_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TripSign, _impl_.junction_names_) +
          decltype(TripSign::_impl_.junction_names_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_junctions_) +
          decltype(TripSign::_impl_.guidance_view_junctions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_signboards_) +
          decltype(TripSign::_impl_.guidance_view_signboards_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TripSign), alignof(TripSign), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TripSign::PlacementNew_,
                                 sizeof(TripSign),
                                 alignof(TripSign));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<18> TripSign::_class_data_ = {
    {
        &_TripSign_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TripSign::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<TripSign>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TripSign::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<TripSign>(), &TripSign::ByteSizeLong,
            &TripSign::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TripSign, _impl_._cached_size_),
        true,
    },
    "valhalla.TripSign",
};
const ::google::protobuf::internal::ClassData* TripSign::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 9, 0, 2> TripSign::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::TripSign>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .valhalla.TripSignElement exit_numbers = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_numbers_)}},
    // repeated .valhalla.TripSignElement exit_onto_streets = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_onto_streets_)}},
    // repeated .valhalla.TripSignElement exit_toward_locations = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_toward_locations_)}},
    // repeated .valhalla.TripSignElement exit_names = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_names_)}},
    // repeated .valhalla.TripSignElement guide_onto_streets = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_onto_streets_)}},
    // repeated .valhalla.TripSignElement guide_toward_locations = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_toward_locations_)}},
    // repeated .valhalla.TripSignElement junction_names = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 6, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.junction_names_)}},
    // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 7, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_junctions_)}},
    // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 8, PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_signboards_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .valhalla.TripSignElement exit_numbers = 1;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_numbers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement exit_onto_streets = 2;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_onto_streets_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement exit_toward_locations = 3;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_toward_locations_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement exit_names = 4;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.exit_names_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement guide_onto_streets = 5;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_onto_streets_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement guide_toward_locations = 6;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guide_toward_locations_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement junction_names = 7;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.junction_names_), 0, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_junctions_), 0, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
    {PROTOBUF_FIELD_OFFSET(TripSign, _impl_.guidance_view_signboards_), 0, 8,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
    {::_pbi::TcParser::GetTable<::valhalla::TripSignElement>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TripSign::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.TripSign)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exit_numbers_.Clear();
  _impl_.exit_onto_streets_.Clear();
  _impl_.exit_toward_locations_.Clear();
  _impl_.exit_names_.Clear();
  _impl_.guide_onto_streets_.Clear();
  _impl_.guide_toward_locations_.Clear();
  _impl_.junction_names_.Clear();
  _impl_.guidance_view_junctions_.Clear();
  _impl_.guidance_view_signboards_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TripSign::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TripSign& this_ = static_cast<const TripSign&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TripSign::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TripSign& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.TripSign)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .valhalla.TripSignElement exit_numbers = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_exit_numbers_size());
               i < n; i++) {
            const auto& repfield = this_._internal_exit_numbers().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.TripSignElement exit_onto_streets = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_exit_onto_streets_size());
               i < n; i++) {
            const auto& repfield = this_._internal_exit_onto_streets().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.TripSignElement exit_toward_locations = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_exit_toward_locations_size());
               i < n; i++) {
            const auto& repfield = this_._internal_exit_toward_locations().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.TripSignElement exit_names = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_exit_names_size());
               i < n; i++) {
            const auto& repfield = this_._internal_exit_names().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.TripSignElement guide_onto_streets = 5;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_guide_onto_streets_size());
               i < n; i++) {
            const auto& repfield = this_._internal_guide_onto_streets().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.TripSignElement guide_toward_locations = 6;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_guide_toward_locations_size());
               i < n; i++) {
            const auto& repfield = this_._internal_guide_toward_locations().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.TripSignElement junction_names = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_junction_names_size());
               i < n; i++) {
            const auto& repfield = this_._internal_junction_names().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_guidance_view_junctions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_guidance_view_junctions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    8, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_guidance_view_signboards_size());
               i < n; i++) {
            const auto& repfield = this_._internal_guidance_view_signboards().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    9, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.TripSign)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TripSign::ByteSizeLong(const MessageLite& base) {
          const TripSign& this_ = static_cast<const TripSign&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TripSign::ByteSizeLong() const {
          const TripSign& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.TripSign)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .valhalla.TripSignElement exit_numbers = 1;
            {
              total_size += 1UL * this_._internal_exit_numbers_size();
              for (const auto& msg : this_._internal_exit_numbers()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.TripSignElement exit_onto_streets = 2;
            {
              total_size += 1UL * this_._internal_exit_onto_streets_size();
              for (const auto& msg : this_._internal_exit_onto_streets()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.TripSignElement exit_toward_locations = 3;
            {
              total_size += 1UL * this_._internal_exit_toward_locations_size();
              for (const auto& msg : this_._internal_exit_toward_locations()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.TripSignElement exit_names = 4;
            {
              total_size += 1UL * this_._internal_exit_names_size();
              for (const auto& msg : this_._internal_exit_names()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.TripSignElement guide_onto_streets = 5;
            {
              total_size += 1UL * this_._internal_guide_onto_streets_size();
              for (const auto& msg : this_._internal_guide_onto_streets()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.TripSignElement guide_toward_locations = 6;
            {
              total_size += 1UL * this_._internal_guide_toward_locations_size();
              for (const auto& msg : this_._internal_guide_toward_locations()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.TripSignElement junction_names = 7;
            {
              total_size += 1UL * this_._internal_junction_names_size();
              for (const auto& msg : this_._internal_junction_names()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.TripSignElement guidance_view_junctions = 8;
            {
              total_size += 1UL * this_._internal_guidance_view_junctions_size();
              for (const auto& msg : this_._internal_guidance_view_junctions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.TripSignElement guidance_view_signboards = 9;
            {
              total_size += 1UL * this_._internal_guidance_view_signboards_size();
              for (const auto& msg : this_._internal_guidance_view_signboards()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void TripSign::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TripSign*>(&to_msg);
  auto& from = static_cast<const TripSign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.TripSign)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exit_numbers()->MergeFrom(
      from._internal_exit_numbers());
  _this->_internal_mutable_exit_onto_streets()->MergeFrom(
      from._internal_exit_onto_streets());
  _this->_internal_mutable_exit_toward_locations()->MergeFrom(
      from._internal_exit_toward_locations());
  _this->_internal_mutable_exit_names()->MergeFrom(
      from._internal_exit_names());
  _this->_internal_mutable_guide_onto_streets()->MergeFrom(
      from._internal_guide_onto_streets());
  _this->_internal_mutable_guide_toward_locations()->MergeFrom(
      from._internal_guide_toward_locations());
  _this->_internal_mutable_junction_names()->MergeFrom(
      from._internal_junction_names());
  _this->_internal_mutable_guidance_view_junctions()->MergeFrom(
      from._internal_guidance_view_junctions());
  _this->_internal_mutable_guidance_view_signboards()->MergeFrom(
      from._internal_guidance_view_signboards());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TripSign::CopyFrom(const TripSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.TripSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TripSign::InternalSwap(TripSign* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exit_numbers_.InternalSwap(&other->_impl_.exit_numbers_);
  _impl_.exit_onto_streets_.InternalSwap(&other->_impl_.exit_onto_streets_);
  _impl_.exit_toward_locations_.InternalSwap(&other->_impl_.exit_toward_locations_);
  _impl_.exit_names_.InternalSwap(&other->_impl_.exit_names_);
  _impl_.guide_onto_streets_.InternalSwap(&other->_impl_.guide_onto_streets_);
  _impl_.guide_toward_locations_.InternalSwap(&other->_impl_.guide_toward_locations_);
  _impl_.junction_names_.InternalSwap(&other->_impl_.junction_names_);
  _impl_.guidance_view_junctions_.InternalSwap(&other->_impl_.guidance_view_junctions_);
  _impl_.guidance_view_signboards_.InternalSwap(&other->_impl_.guidance_view_signboards_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
