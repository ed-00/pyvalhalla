// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: incidents.proto
// Protobuf C++ Version: 5.29.3

#include "incidents.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace valhalla {

inline constexpr IncidentsTile_Metadata_Congestion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IncidentsTile_Metadata_Congestion::IncidentsTile_Metadata_Congestion(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IncidentsTile_Metadata_CongestionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentsTile_Metadata_CongestionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentsTile_Metadata_CongestionDefaultTypeInternal() {}
  union {
    IncidentsTile_Metadata_Congestion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentsTile_Metadata_CongestionDefaultTypeInternal _IncidentsTile_Metadata_Congestion_default_instance_;

inline constexpr IncidentsTile_Location::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : edge_index_{0u},
        start_offset_{0},
        end_offset_{0},
        metadata_index_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IncidentsTile_Location::IncidentsTile_Location(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IncidentsTile_LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentsTile_LocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentsTile_LocationDefaultTypeInternal() {}
  union {
    IncidentsTile_Location _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentsTile_LocationDefaultTypeInternal _IncidentsTile_Location_default_instance_;

inline constexpr IncidentsTile_Metadata::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        alertc_codes_{},
        _alertc_codes_cached_byte_size_{0},
        lanes_blocked_{},
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sub_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sub_type_description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        long_description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        clear_lanes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        iso_3166_1_alpha2_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        iso_3166_1_alpha3_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        congestion_{nullptr},
        type_{static_cast< ::valhalla::IncidentsTile_Metadata_Type >(0)},
        impact_{static_cast< ::valhalla::IncidentsTile_Metadata_Impact >(0)},
        start_time_{::uint64_t{0u}},
        end_time_{::uint64_t{0u}},
        creation_time_{::uint64_t{0u}},
        road_closed_{false},
        length_{0u},
        num_lanes_blocked_{::uint64_t{0u}},
        id_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR IncidentsTile_Metadata::IncidentsTile_Metadata(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IncidentsTile_MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentsTile_MetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentsTile_MetadataDefaultTypeInternal() {}
  union {
    IncidentsTile_Metadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentsTile_MetadataDefaultTypeInternal _IncidentsTile_Metadata_default_instance_;

inline constexpr IncidentsTile::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : locations_{},
        metadata_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IncidentsTile::IncidentsTile(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IncidentsTileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidentsTileDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidentsTileDefaultTypeInternal() {}
  union {
    IncidentsTile _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidentsTileDefaultTypeInternal _IncidentsTile_default_instance_;
}  // namespace valhalla
namespace valhalla {
PROTOBUF_CONSTINIT const uint32_t IncidentsTile_Metadata_Type_internal_data_[] = {
    786432u, 0u, };
bool IncidentsTile_Metadata_Type_IsValid(int value) {
  return 0 <= value && value <= 11;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    IncidentsTile_Metadata_Type_strings[12] = {};

static const char IncidentsTile_Metadata_Type_names[] = {
    "ACCIDENT"
    "CONGESTION"
    "CONSTRUCTION"
    "DISABLED_VEHICLE"
    "LANE_RESTRICTION"
    "MASS_TRANSIT"
    "MISCELLANEOUS"
    "OTHER_NEWS"
    "PLANNED_EVENT"
    "ROAD_CLOSURE"
    "ROAD_HAZARD"
    "WEATHER"
};

static const ::google::protobuf::internal::EnumEntry IncidentsTile_Metadata_Type_entries[] =
    {
        {{&IncidentsTile_Metadata_Type_names[0], 8}, 0},
        {{&IncidentsTile_Metadata_Type_names[8], 10}, 1},
        {{&IncidentsTile_Metadata_Type_names[18], 12}, 2},
        {{&IncidentsTile_Metadata_Type_names[30], 16}, 3},
        {{&IncidentsTile_Metadata_Type_names[46], 16}, 4},
        {{&IncidentsTile_Metadata_Type_names[62], 12}, 5},
        {{&IncidentsTile_Metadata_Type_names[74], 13}, 6},
        {{&IncidentsTile_Metadata_Type_names[87], 10}, 7},
        {{&IncidentsTile_Metadata_Type_names[97], 13}, 8},
        {{&IncidentsTile_Metadata_Type_names[110], 12}, 9},
        {{&IncidentsTile_Metadata_Type_names[122], 11}, 10},
        {{&IncidentsTile_Metadata_Type_names[133], 7}, 11},
};

static const int IncidentsTile_Metadata_Type_entries_by_number[] = {
    0,  // 0 -> ACCIDENT
    1,  // 1 -> CONGESTION
    2,  // 2 -> CONSTRUCTION
    3,  // 3 -> DISABLED_VEHICLE
    4,  // 4 -> LANE_RESTRICTION
    5,  // 5 -> MASS_TRANSIT
    6,  // 6 -> MISCELLANEOUS
    7,  // 7 -> OTHER_NEWS
    8,  // 8 -> PLANNED_EVENT
    9,  // 9 -> ROAD_CLOSURE
    10,  // 10 -> ROAD_HAZARD
    11,  // 11 -> WEATHER
};

const std::string& IncidentsTile_Metadata_Type_Name(IncidentsTile_Metadata_Type value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          IncidentsTile_Metadata_Type_entries, IncidentsTile_Metadata_Type_entries_by_number,
          12, IncidentsTile_Metadata_Type_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      IncidentsTile_Metadata_Type_entries, IncidentsTile_Metadata_Type_entries_by_number, 12,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : IncidentsTile_Metadata_Type_strings[idx].get();
}

bool IncidentsTile_Metadata_Type_Parse(absl::string_view name, IncidentsTile_Metadata_Type* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      IncidentsTile_Metadata_Type_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<IncidentsTile_Metadata_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::ACCIDENT;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::CONGESTION;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::CONSTRUCTION;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::DISABLED_VEHICLE;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::LANE_RESTRICTION;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::MASS_TRANSIT;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::MISCELLANEOUS;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::OTHER_NEWS;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::PLANNED_EVENT;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::ROAD_CLOSURE;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::ROAD_HAZARD;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::WEATHER;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::Type_MIN;
constexpr IncidentsTile_Metadata_Type IncidentsTile_Metadata::Type_MAX;
constexpr int IncidentsTile_Metadata::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t IncidentsTile_Metadata_Impact_internal_data_[] = {
    327680u, 0u, };
bool IncidentsTile_Metadata_Impact_IsValid(int value) {
  return 0 <= value && value <= 4;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    IncidentsTile_Metadata_Impact_strings[5] = {};

static const char IncidentsTile_Metadata_Impact_names[] = {
    "CRITICAL"
    "LOW"
    "MAJOR"
    "MINOR"
    "UNKNOWN"
};

static const ::google::protobuf::internal::EnumEntry IncidentsTile_Metadata_Impact_entries[] =
    {
        {{&IncidentsTile_Metadata_Impact_names[0], 8}, 1},
        {{&IncidentsTile_Metadata_Impact_names[8], 3}, 4},
        {{&IncidentsTile_Metadata_Impact_names[11], 5}, 2},
        {{&IncidentsTile_Metadata_Impact_names[16], 5}, 3},
        {{&IncidentsTile_Metadata_Impact_names[21], 7}, 0},
};

static const int IncidentsTile_Metadata_Impact_entries_by_number[] = {
    4,  // 0 -> UNKNOWN
    0,  // 1 -> CRITICAL
    2,  // 2 -> MAJOR
    3,  // 3 -> MINOR
    1,  // 4 -> LOW
};

const std::string& IncidentsTile_Metadata_Impact_Name(IncidentsTile_Metadata_Impact value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          IncidentsTile_Metadata_Impact_entries, IncidentsTile_Metadata_Impact_entries_by_number,
          5, IncidentsTile_Metadata_Impact_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      IncidentsTile_Metadata_Impact_entries, IncidentsTile_Metadata_Impact_entries_by_number, 5,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : IncidentsTile_Metadata_Impact_strings[idx].get();
}

bool IncidentsTile_Metadata_Impact_Parse(absl::string_view name, IncidentsTile_Metadata_Impact* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      IncidentsTile_Metadata_Impact_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IncidentsTile_Metadata_Impact>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::UNKNOWN;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::CRITICAL;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::MAJOR;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::MINOR;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::LOW;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::Impact_MIN;
constexpr IncidentsTile_Metadata_Impact IncidentsTile_Metadata::Impact_MAX;
constexpr int IncidentsTile_Metadata::Impact_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class IncidentsTile_Location::_Internal {
 public:
};

IncidentsTile_Location::IncidentsTile_Location(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.IncidentsTile.Location)
}
IncidentsTile_Location::IncidentsTile_Location(
    ::google::protobuf::Arena* arena, const IncidentsTile_Location& from)
    : IncidentsTile_Location(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE IncidentsTile_Location::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IncidentsTile_Location::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, edge_index_),
           0,
           offsetof(Impl_, metadata_index_) -
               offsetof(Impl_, edge_index_) +
               sizeof(Impl_::metadata_index_));
}
IncidentsTile_Location::~IncidentsTile_Location() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile.Location)
  SharedDtor(*this);
}
inline void IncidentsTile_Location::SharedDtor(MessageLite& self) {
  IncidentsTile_Location& this_ = static_cast<IncidentsTile_Location&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* IncidentsTile_Location::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IncidentsTile_Location(arena);
}
constexpr auto IncidentsTile_Location::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(IncidentsTile_Location),
                                            alignof(IncidentsTile_Location));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<32> IncidentsTile_Location::_class_data_ = {
    {
        &_IncidentsTile_Location_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IncidentsTile_Location::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<IncidentsTile_Location>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IncidentsTile_Location::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<IncidentsTile_Location>(), &IncidentsTile_Location::ByteSizeLong,
            &IncidentsTile_Location::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_._cached_size_),
        true,
    },
    "valhalla.IncidentsTile.Location",
};
const ::google::protobuf::internal::ClassData* IncidentsTile_Location::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> IncidentsTile_Location::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::IncidentsTile_Location>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 metadata_index = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.metadata_index_)}},
    // uint32 edge_index = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.edge_index_)}},
    // float start_offset = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.start_offset_)}},
    // float end_offset = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.end_offset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 edge_index = 1;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.edge_index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // float start_offset = 2;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.start_offset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float end_offset = 3;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.end_offset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // uint32 metadata_index = 4;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.metadata_index_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void IncidentsTile_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile.Location)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.edge_index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.metadata_index_) -
      reinterpret_cast<char*>(&_impl_.edge_index_)) + sizeof(_impl_.metadata_index_));
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IncidentsTile_Location::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IncidentsTile_Location& this_ = static_cast<const IncidentsTile_Location&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IncidentsTile_Location::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IncidentsTile_Location& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.IncidentsTile.Location)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 edge_index = 1;
          if (this_._internal_edge_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_edge_index(), target);
          }

          // float start_offset = 2;
          if (::absl::bit_cast<::uint32_t>(this_._internal_start_offset()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_start_offset(), target);
          }

          // float end_offset = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_end_offset()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_end_offset(), target);
          }

          // uint32 metadata_index = 4;
          if (this_._internal_metadata_index() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_metadata_index(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.IncidentsTile.Location)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IncidentsTile_Location::ByteSizeLong(const MessageLite& base) {
          const IncidentsTile_Location& this_ = static_cast<const IncidentsTile_Location&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IncidentsTile_Location::ByteSizeLong() const {
          const IncidentsTile_Location& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile.Location)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint32 edge_index = 1;
            if (this_._internal_edge_index() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_edge_index());
            }
            // float start_offset = 2;
            if (::absl::bit_cast<::uint32_t>(this_._internal_start_offset()) != 0) {
              total_size += 5;
            }
            // float end_offset = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_end_offset()) != 0) {
              total_size += 5;
            }
            // uint32 metadata_index = 4;
            if (this_._internal_metadata_index() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_metadata_index());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void IncidentsTile_Location::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IncidentsTile_Location*>(&to_msg);
  auto& from = static_cast<const IncidentsTile_Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile.Location)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_edge_index() != 0) {
    _this->_impl_.edge_index_ = from._impl_.edge_index_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_start_offset()) != 0) {
    _this->_impl_.start_offset_ = from._impl_.start_offset_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_end_offset()) != 0) {
    _this->_impl_.end_offset_ = from._impl_.end_offset_;
  }
  if (from._internal_metadata_index() != 0) {
    _this->_impl_.metadata_index_ = from._impl_.metadata_index_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncidentsTile_Location::CopyFrom(const IncidentsTile_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IncidentsTile_Location::InternalSwap(IncidentsTile_Location* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.metadata_index_)
      + sizeof(IncidentsTile_Location::_impl_.metadata_index_)
      - PROTOBUF_FIELD_OFFSET(IncidentsTile_Location, _impl_.edge_index_)>(
          reinterpret_cast<char*>(&_impl_.edge_index_),
          reinterpret_cast<char*>(&other->_impl_.edge_index_));
}

// ===================================================================

class IncidentsTile_Metadata_Congestion::_Internal {
 public:
};

IncidentsTile_Metadata_Congestion::IncidentsTile_Metadata_Congestion(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.IncidentsTile.Metadata.Congestion)
}
IncidentsTile_Metadata_Congestion::IncidentsTile_Metadata_Congestion(
    ::google::protobuf::Arena* arena, const IncidentsTile_Metadata_Congestion& from)
    : IncidentsTile_Metadata_Congestion(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE IncidentsTile_Metadata_Congestion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IncidentsTile_Metadata_Congestion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
IncidentsTile_Metadata_Congestion::~IncidentsTile_Metadata_Congestion() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile.Metadata.Congestion)
  SharedDtor(*this);
}
inline void IncidentsTile_Metadata_Congestion::SharedDtor(MessageLite& self) {
  IncidentsTile_Metadata_Congestion& this_ = static_cast<IncidentsTile_Metadata_Congestion&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* IncidentsTile_Metadata_Congestion::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IncidentsTile_Metadata_Congestion(arena);
}
constexpr auto IncidentsTile_Metadata_Congestion::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(IncidentsTile_Metadata_Congestion),
                                            alignof(IncidentsTile_Metadata_Congestion));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<43> IncidentsTile_Metadata_Congestion::_class_data_ = {
    {
        &_IncidentsTile_Metadata_Congestion_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IncidentsTile_Metadata_Congestion::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<IncidentsTile_Metadata_Congestion>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IncidentsTile_Metadata_Congestion::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<IncidentsTile_Metadata_Congestion>(), &IncidentsTile_Metadata_Congestion::ByteSizeLong,
            &IncidentsTile_Metadata_Congestion::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata_Congestion, _impl_._cached_size_),
        true,
    },
    "valhalla.IncidentsTile.Metadata.Congestion",
};
const ::google::protobuf::internal::ClassData* IncidentsTile_Metadata_Congestion::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> IncidentsTile_Metadata_Congestion::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::IncidentsTile_Metadata_Congestion>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 value = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata_Congestion, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 value = 1;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata_Congestion, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void IncidentsTile_Metadata_Congestion::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile.Metadata.Congestion)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IncidentsTile_Metadata_Congestion::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IncidentsTile_Metadata_Congestion& this_ = static_cast<const IncidentsTile_Metadata_Congestion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IncidentsTile_Metadata_Congestion::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IncidentsTile_Metadata_Congestion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.IncidentsTile.Metadata.Congestion)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 value = 1;
          if (this_._internal_value() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_value(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.IncidentsTile.Metadata.Congestion)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IncidentsTile_Metadata_Congestion::ByteSizeLong(const MessageLite& base) {
          const IncidentsTile_Metadata_Congestion& this_ = static_cast<const IncidentsTile_Metadata_Congestion&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IncidentsTile_Metadata_Congestion::ByteSizeLong() const {
          const IncidentsTile_Metadata_Congestion& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile.Metadata.Congestion)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // uint32 value = 1;
            if (this_._internal_value() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_value());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void IncidentsTile_Metadata_Congestion::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IncidentsTile_Metadata_Congestion*>(&to_msg);
  auto& from = static_cast<const IncidentsTile_Metadata_Congestion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile.Metadata.Congestion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncidentsTile_Metadata_Congestion::CopyFrom(const IncidentsTile_Metadata_Congestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile.Metadata.Congestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IncidentsTile_Metadata_Congestion::InternalSwap(IncidentsTile_Metadata_Congestion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.value_, other->_impl_.value_);
}

// ===================================================================

class IncidentsTile_Metadata::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IncidentsTile_Metadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_._has_bits_);
};

IncidentsTile_Metadata::IncidentsTile_Metadata(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.IncidentsTile.Metadata)
}
inline PROTOBUF_NDEBUG_INLINE IncidentsTile_Metadata::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::IncidentsTile_Metadata& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        alertc_codes_{visibility, arena, from.alertc_codes_},
        _alertc_codes_cached_byte_size_{0},
        lanes_blocked_{visibility, arena, from.lanes_blocked_},
        description_(arena, from.description_),
        sub_type_(arena, from.sub_type_),
        sub_type_description_(arena, from.sub_type_description_),
        long_description_(arena, from.long_description_),
        clear_lanes_(arena, from.clear_lanes_),
        iso_3166_1_alpha2_(arena, from.iso_3166_1_alpha2_),
        iso_3166_1_alpha3_(arena, from.iso_3166_1_alpha3_) {}

IncidentsTile_Metadata::IncidentsTile_Metadata(
    ::google::protobuf::Arena* arena,
    const IncidentsTile_Metadata& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IncidentsTile_Metadata* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.congestion_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::MessageLite::CopyConstruct<::valhalla::IncidentsTile_Metadata_Congestion>(
                              arena, *from._impl_.congestion_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, id_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::id_));

  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile.Metadata)
}
inline PROTOBUF_NDEBUG_INLINE IncidentsTile_Metadata::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        alertc_codes_{visibility, arena},
        _alertc_codes_cached_byte_size_{0},
        lanes_blocked_{visibility, arena},
        description_(arena),
        sub_type_(arena),
        sub_type_description_(arena),
        long_description_(arena),
        clear_lanes_(arena),
        iso_3166_1_alpha2_(arena),
        iso_3166_1_alpha3_(arena) {}

inline void IncidentsTile_Metadata::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, congestion_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, congestion_) +
               sizeof(Impl_::id_));
}
IncidentsTile_Metadata::~IncidentsTile_Metadata() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile.Metadata)
  SharedDtor(*this);
}
inline void IncidentsTile_Metadata::SharedDtor(MessageLite& self) {
  IncidentsTile_Metadata& this_ = static_cast<IncidentsTile_Metadata&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.description_.Destroy();
  this_._impl_.sub_type_.Destroy();
  this_._impl_.sub_type_description_.Destroy();
  this_._impl_.long_description_.Destroy();
  this_._impl_.clear_lanes_.Destroy();
  this_._impl_.iso_3166_1_alpha2_.Destroy();
  this_._impl_.iso_3166_1_alpha3_.Destroy();
  delete this_._impl_.congestion_;
  this_._impl_.~Impl_();
}

inline void* IncidentsTile_Metadata::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IncidentsTile_Metadata(arena);
}
constexpr auto IncidentsTile_Metadata::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.alertc_codes_) +
          decltype(IncidentsTile_Metadata::_impl_.alertc_codes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.lanes_blocked_) +
          decltype(IncidentsTile_Metadata::_impl_.lanes_blocked_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(IncidentsTile_Metadata), alignof(IncidentsTile_Metadata), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&IncidentsTile_Metadata::PlacementNew_,
                                 sizeof(IncidentsTile_Metadata),
                                 alignof(IncidentsTile_Metadata));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<32> IncidentsTile_Metadata::_class_data_ = {
    {
        &_IncidentsTile_Metadata_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IncidentsTile_Metadata::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<IncidentsTile_Metadata>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IncidentsTile_Metadata::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<IncidentsTile_Metadata>(), &IncidentsTile_Metadata::ByteSizeLong,
            &IncidentsTile_Metadata::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_._cached_size_),
        true,
    },
    "valhalla.IncidentsTile.Metadata",
};
const ::google::protobuf::internal::ClassData* IncidentsTile_Metadata::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 19, 1, 169, 7> IncidentsTile_Metadata::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_._has_bits_),
    0, // no _extensions_
    130, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836352,  // skipmap
    offsetof(decltype(_table_), field_entries),
    19,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::IncidentsTile_Metadata>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .valhalla.IncidentsTile.Metadata.Type type = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.type_)}},
    // repeated uint32 alertc_codes = 2;
    {::_pbi::TcParser::FastV32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.alertc_codes_)}},
    // string description = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.description_)}},
    // string sub_type = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.sub_type_)}},
    // string sub_type_description = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.sub_type_description_)}},
    // uint64 start_time = 6;
    {::_pbi::TcParser::FastV64S1,
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.start_time_)}},
    // uint64 end_time = 7;
    {::_pbi::TcParser::FastV64S1,
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.end_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .valhalla.IncidentsTile.Metadata.Impact impact = 9;
    {::_pbi::TcParser::FastV32S1,
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.impact_)}},
    // bool road_closed = 10;
    {::_pbi::TcParser::FastV8S1,
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.road_closed_)}},
    // .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.congestion_)}},
    // repeated string lanes_blocked = 12;
    {::_pbi::TcParser::FastUR1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.lanes_blocked_)}},
    // uint64 creation_time = 13;
    {::_pbi::TcParser::FastV64S1,
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.creation_time_)}},
    // string long_description = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.long_description_)}},
    // string clear_lanes = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.clear_lanes_)}},
    // uint64 num_lanes_blocked = 16;
    {::_pbi::TcParser::FastV64S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.num_lanes_blocked_)}},
    // uint32 length = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.length_)}},
    // string iso_3166_1_alpha3 = 130;
    {::_pbi::TcParser::FastUS2,
     {2194, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.iso_3166_1_alpha3_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    128, 0, 1,
    65528, 16,
    65535, 65535
  }}, {{
    // .valhalla.IncidentsTile.Metadata.Type type = 1;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated uint32 alertc_codes = 2;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.alertc_codes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // string description = 3;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sub_type = 4;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.sub_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sub_type_description = 5;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.sub_type_description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 start_time = 6;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.start_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint64 end_time = 7;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.end_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .valhalla.IncidentsTile.Metadata.Impact impact = 9;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.impact_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool road_closed = 10;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.road_closed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.congestion_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string lanes_blocked = 12;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.lanes_blocked_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // uint64 creation_time = 13;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.creation_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string long_description = 14;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.long_description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string clear_lanes = 15;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.clear_lanes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 num_lanes_blocked = 16;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.num_lanes_blocked_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // uint32 length = 17;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.length_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 id = 128;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string iso_3166_1_alpha2 = 129;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.iso_3166_1_alpha2_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string iso_3166_1_alpha3 = 130;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.iso_3166_1_alpha3_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::IncidentsTile_Metadata_Congestion>()},
  }}, {{
    "\37\0\0\13\10\24\0\0\0\0\0\15\0\20\13\0\0\0\21\21\0\0\0\0"
    "valhalla.IncidentsTile.Metadata"
    "description"
    "sub_type"
    "sub_type_description"
    "lanes_blocked"
    "long_description"
    "clear_lanes"
    "iso_3166_1_alpha2"
    "iso_3166_1_alpha3"
  }},
};

PROTOBUF_NOINLINE void IncidentsTile_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile.Metadata)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alertc_codes_.Clear();
  _impl_.lanes_blocked_.Clear();
  _impl_.description_.ClearToEmpty();
  _impl_.sub_type_.ClearToEmpty();
  _impl_.sub_type_description_.ClearToEmpty();
  _impl_.long_description_.ClearToEmpty();
  _impl_.clear_lanes_.ClearToEmpty();
  _impl_.iso_3166_1_alpha2_.ClearToEmpty();
  _impl_.iso_3166_1_alpha3_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.congestion_ != nullptr);
    _impl_.congestion_->Clear();
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IncidentsTile_Metadata::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IncidentsTile_Metadata& this_ = static_cast<const IncidentsTile_Metadata&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IncidentsTile_Metadata::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IncidentsTile_Metadata& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.IncidentsTile.Metadata)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .valhalla.IncidentsTile.Metadata.Type type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          // repeated uint32 alertc_codes = 2;
          {
            int byte_size = this_._impl_._alertc_codes_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  2, this_._internal_alertc_codes(), byte_size, target);
            }
          }

          // string description = 3;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.IncidentsTile.Metadata.description");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string sub_type = 4;
          if (!this_._internal_sub_type().empty()) {
            const std::string& _s = this_._internal_sub_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.IncidentsTile.Metadata.sub_type");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string sub_type_description = 5;
          if (!this_._internal_sub_type_description().empty()) {
            const std::string& _s = this_._internal_sub_type_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.IncidentsTile.Metadata.sub_type_description");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // uint64 start_time = 6;
          if (this_._internal_start_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                6, this_._internal_start_time(), target);
          }

          // uint64 end_time = 7;
          if (this_._internal_end_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                7, this_._internal_end_time(), target);
          }

          // .valhalla.IncidentsTile.Metadata.Impact impact = 9;
          if (this_._internal_impact() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                9, this_._internal_impact(), target);
          }

          // bool road_closed = 10;
          if (this_._internal_road_closed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_road_closed(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.congestion_, this_._impl_.congestion_->GetCachedSize(), target,
                stream);
          }

          // repeated string lanes_blocked = 12;
          for (int i = 0, n = this_._internal_lanes_blocked_size(); i < n; ++i) {
            const auto& s = this_._internal_lanes_blocked().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.IncidentsTile.Metadata.lanes_blocked");
            target = stream->WriteString(12, s, target);
          }

          // uint64 creation_time = 13;
          if (this_._internal_creation_time() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                13, this_._internal_creation_time(), target);
          }

          // string long_description = 14;
          if (!this_._internal_long_description().empty()) {
            const std::string& _s = this_._internal_long_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.IncidentsTile.Metadata.long_description");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // string clear_lanes = 15;
          if (!this_._internal_clear_lanes().empty()) {
            const std::string& _s = this_._internal_clear_lanes();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.IncidentsTile.Metadata.clear_lanes");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // uint64 num_lanes_blocked = 16;
          if (this_._internal_num_lanes_blocked() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                16, this_._internal_num_lanes_blocked(), target);
          }

          // uint32 length = 17;
          if (this_._internal_length() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                17, this_._internal_length(), target);
          }

          // uint64 id = 128;
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                128, this_._internal_id(), target);
          }

          // string iso_3166_1_alpha2 = 129;
          if (!this_._internal_iso_3166_1_alpha2().empty()) {
            const std::string& _s = this_._internal_iso_3166_1_alpha2();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.IncidentsTile.Metadata.iso_3166_1_alpha2");
            target = stream->WriteStringMaybeAliased(129, _s, target);
          }

          // string iso_3166_1_alpha3 = 130;
          if (!this_._internal_iso_3166_1_alpha3().empty()) {
            const std::string& _s = this_._internal_iso_3166_1_alpha3();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "valhalla.IncidentsTile.Metadata.iso_3166_1_alpha3");
            target = stream->WriteStringMaybeAliased(130, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.IncidentsTile.Metadata)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IncidentsTile_Metadata::ByteSizeLong(const MessageLite& base) {
          const IncidentsTile_Metadata& this_ = static_cast<const IncidentsTile_Metadata&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IncidentsTile_Metadata::ByteSizeLong() const {
          const IncidentsTile_Metadata& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile.Metadata)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated uint32 alertc_codes = 2;
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_alertc_codes(), 1,
                      this_._impl_._alertc_codes_cached_byte_size_);
            }
            // repeated string lanes_blocked = 12;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_lanes_blocked().size());
              for (int i = 0, n = this_._internal_lanes_blocked().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_lanes_blocked().Get(i));
              }
            }
          }
           {
            // string description = 3;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string sub_type = 4;
            if (!this_._internal_sub_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sub_type());
            }
            // string sub_type_description = 5;
            if (!this_._internal_sub_type_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sub_type_description());
            }
            // string long_description = 14;
            if (!this_._internal_long_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_long_description());
            }
            // string clear_lanes = 15;
            if (!this_._internal_clear_lanes().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_clear_lanes());
            }
            // string iso_3166_1_alpha2 = 129;
            if (!this_._internal_iso_3166_1_alpha2().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_iso_3166_1_alpha2());
            }
            // string iso_3166_1_alpha3 = 130;
            if (!this_._internal_iso_3166_1_alpha3().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_iso_3166_1_alpha3());
            }
          }
           {
            // .valhalla.IncidentsTile.Metadata.Congestion congestion = 11;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.congestion_);
            }
          }
           {
            // .valhalla.IncidentsTile.Metadata.Type type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // .valhalla.IncidentsTile.Metadata.Impact impact = 9;
            if (this_._internal_impact() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_impact());
            }
            // uint64 start_time = 6;
            if (this_._internal_start_time() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_start_time());
            }
            // uint64 end_time = 7;
            if (this_._internal_end_time() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_end_time());
            }
            // uint64 creation_time = 13;
            if (this_._internal_creation_time() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_creation_time());
            }
            // bool road_closed = 10;
            if (this_._internal_road_closed() != 0) {
              total_size += 2;
            }
            // uint32 length = 17;
            if (this_._internal_length() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_length());
            }
            // uint64 num_lanes_blocked = 16;
            if (this_._internal_num_lanes_blocked() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                              this_._internal_num_lanes_blocked());
            }
            // uint64 id = 128;
            if (this_._internal_id() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                              this_._internal_id());
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void IncidentsTile_Metadata::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IncidentsTile_Metadata*>(&to_msg);
  auto& from = static_cast<const IncidentsTile_Metadata&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile.Metadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_alertc_codes()->MergeFrom(from._internal_alertc_codes());
  _this->_internal_mutable_lanes_blocked()->MergeFrom(from._internal_lanes_blocked());
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_sub_type().empty()) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  if (!from._internal_sub_type_description().empty()) {
    _this->_internal_set_sub_type_description(from._internal_sub_type_description());
  }
  if (!from._internal_long_description().empty()) {
    _this->_internal_set_long_description(from._internal_long_description());
  }
  if (!from._internal_clear_lanes().empty()) {
    _this->_internal_set_clear_lanes(from._internal_clear_lanes());
  }
  if (!from._internal_iso_3166_1_alpha2().empty()) {
    _this->_internal_set_iso_3166_1_alpha2(from._internal_iso_3166_1_alpha2());
  }
  if (!from._internal_iso_3166_1_alpha3().empty()) {
    _this->_internal_set_iso_3166_1_alpha3(from._internal_iso_3166_1_alpha3());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.congestion_ != nullptr);
    if (_this->_impl_.congestion_ == nullptr) {
      _this->_impl_.congestion_ =
          ::google::protobuf::MessageLite::CopyConstruct<::valhalla::IncidentsTile_Metadata_Congestion>(arena, *from._impl_.congestion_);
    } else {
      _this->_impl_.congestion_->MergeFrom(*from._impl_.congestion_);
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_impact() != 0) {
    _this->_impl_.impact_ = from._impl_.impact_;
  }
  if (from._internal_start_time() != 0) {
    _this->_impl_.start_time_ = from._impl_.start_time_;
  }
  if (from._internal_end_time() != 0) {
    _this->_impl_.end_time_ = from._impl_.end_time_;
  }
  if (from._internal_creation_time() != 0) {
    _this->_impl_.creation_time_ = from._impl_.creation_time_;
  }
  if (from._internal_road_closed() != 0) {
    _this->_impl_.road_closed_ = from._impl_.road_closed_;
  }
  if (from._internal_length() != 0) {
    _this->_impl_.length_ = from._impl_.length_;
  }
  if (from._internal_num_lanes_blocked() != 0) {
    _this->_impl_.num_lanes_blocked_ = from._impl_.num_lanes_blocked_;
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncidentsTile_Metadata::CopyFrom(const IncidentsTile_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IncidentsTile_Metadata::InternalSwap(IncidentsTile_Metadata* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.alertc_codes_.InternalSwap(&other->_impl_.alertc_codes_);
  _impl_.lanes_blocked_.InternalSwap(&other->_impl_.lanes_blocked_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sub_type_, &other->_impl_.sub_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sub_type_description_, &other->_impl_.sub_type_description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.long_description_, &other->_impl_.long_description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clear_lanes_, &other->_impl_.clear_lanes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.iso_3166_1_alpha2_, &other->_impl_.iso_3166_1_alpha2_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.iso_3166_1_alpha3_, &other->_impl_.iso_3166_1_alpha3_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.id_)
      + sizeof(IncidentsTile_Metadata::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(IncidentsTile_Metadata, _impl_.congestion_)>(
          reinterpret_cast<char*>(&_impl_.congestion_),
          reinterpret_cast<char*>(&other->_impl_.congestion_));
}

// ===================================================================

class IncidentsTile::_Internal {
 public:
};

IncidentsTile::IncidentsTile(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:valhalla.IncidentsTile)
}
inline PROTOBUF_NDEBUG_INLINE IncidentsTile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::valhalla::IncidentsTile& from_msg)
      : locations_{visibility, arena, from.locations_},
        metadata_{visibility, arena, from.metadata_},
        _cached_size_{0} {}

IncidentsTile::IncidentsTile(
    ::google::protobuf::Arena* arena,
    const IncidentsTile& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::MessageLite(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::MessageLite(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IncidentsTile* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:valhalla.IncidentsTile)
}
inline PROTOBUF_NDEBUG_INLINE IncidentsTile::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : locations_{visibility, arena},
        metadata_{visibility, arena},
        _cached_size_{0} {}

inline void IncidentsTile::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
IncidentsTile::~IncidentsTile() {
  // @@protoc_insertion_point(destructor:valhalla.IncidentsTile)
  SharedDtor(*this);
}
inline void IncidentsTile::SharedDtor(MessageLite& self) {
  IncidentsTile& this_ = static_cast<IncidentsTile&>(self);
  this_._internal_metadata_.Delete<std::string>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* IncidentsTile::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IncidentsTile(arena);
}
constexpr auto IncidentsTile::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(IncidentsTile, _impl_.locations_) +
          decltype(IncidentsTile::_impl_.locations_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(IncidentsTile, _impl_.metadata_) +
          decltype(IncidentsTile::_impl_.metadata_)::
              InternalGetArenaOffset(
                  ::google::protobuf::MessageLite::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(IncidentsTile), alignof(IncidentsTile), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&IncidentsTile::PlacementNew_,
                                 sizeof(IncidentsTile),
                                 alignof(IncidentsTile));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataLite<23> IncidentsTile::_class_data_ = {
    {
        &_IncidentsTile_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IncidentsTile::MergeImpl,
        ::google::protobuf::MessageLite::GetNewImpl<IncidentsTile>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IncidentsTile::SharedDtor,
        ::google::protobuf::MessageLite::GetClearImpl<IncidentsTile>(), &IncidentsTile::ByteSizeLong,
            &IncidentsTile::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IncidentsTile, _impl_._cached_size_),
        true,
    },
    "valhalla.IncidentsTile",
};
const ::google::protobuf::internal::ClassData* IncidentsTile::GetClassData() const {
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> IncidentsTile::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::valhalla::IncidentsTile>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(IncidentsTile, _impl_.metadata_)}},
    // repeated .valhalla.IncidentsTile.Location locations = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IncidentsTile, _impl_.locations_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .valhalla.IncidentsTile.Location locations = 1;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile, _impl_.locations_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
    {PROTOBUF_FIELD_OFFSET(IncidentsTile, _impl_.metadata_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::valhalla::IncidentsTile_Location>()},
    {::_pbi::TcParser::GetTable<::valhalla::IncidentsTile_Metadata>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void IncidentsTile::Clear() {
// @@protoc_insertion_point(message_clear_start:valhalla.IncidentsTile)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.locations_.Clear();
  _impl_.metadata_.Clear();
  _internal_metadata_.Clear<std::string>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IncidentsTile::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IncidentsTile& this_ = static_cast<const IncidentsTile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IncidentsTile::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IncidentsTile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:valhalla.IncidentsTile)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .valhalla.IncidentsTile.Location locations = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_locations_size());
               i < n; i++) {
            const auto& repfield = this_._internal_locations().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_metadata_size());
               i < n; i++) {
            const auto& repfield = this_._internal_metadata().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target = stream->WriteRaw(
                this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
                static_cast<int>(this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
          }
          // @@protoc_insertion_point(serialize_to_array_end:valhalla.IncidentsTile)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IncidentsTile::ByteSizeLong(const MessageLite& base) {
          const IncidentsTile& this_ = static_cast<const IncidentsTile&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IncidentsTile::ByteSizeLong() const {
          const IncidentsTile& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:valhalla.IncidentsTile)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .valhalla.IncidentsTile.Location locations = 1;
            {
              total_size += 1UL * this_._internal_locations_size();
              for (const auto& msg : this_._internal_locations()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .valhalla.IncidentsTile.Metadata metadata = 2;
            {
              total_size += 1UL * this_._internal_metadata_size();
              for (const auto& msg : this_._internal_metadata()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            total_size += this_._internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
          }
          this_._impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
          return total_size;
        }

void IncidentsTile::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IncidentsTile*>(&to_msg);
  auto& from = static_cast<const IncidentsTile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:valhalla.IncidentsTile)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_locations()->MergeFrom(
      from._internal_locations());
  _this->_internal_mutable_metadata()->MergeFrom(
      from._internal_metadata());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncidentsTile::CopyFrom(const IncidentsTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:valhalla.IncidentsTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IncidentsTile::InternalSwap(IncidentsTile* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.locations_.InternalSwap(&other->_impl_.locations_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace valhalla
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
